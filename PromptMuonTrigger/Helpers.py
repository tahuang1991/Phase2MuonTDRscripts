import array
from ROOT import *
from cuts import *
import math
import array
from math import log10, floor
from logic import *
import numpy as np
import os
import random

ptbin = [
    2.0,   2.5,   3.0,   3.5,   4.0,   4.5,   5.0,   6.0,   7.0,   8.0,
    10.0,  12.0,  14.0,  16.0,  18.0,  20.0,  25.0,  30.0,  35.0,  40.0,
    45.0,  50.0,  60.0,  70.0,  80.0,  90.0, 100.0, 120.0, 140.0]
myptbin = np.asarray(ptbin)
nmyptbin = len(myptbin) - 1

binLow = [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,12.0,14.0,16.0,18.0,20.0,24.0,28.0,32.0,36.0,42.0,50.0]
ptbins = np.asarray(binLow)


etabin = [
    0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,
    1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9,
    2.0, 2.1, 2.2, 2.3, 2.4, 2.5]
myetabin = np.asarray(etabin)

#______________________________________________________________________________
M_PI = 4*math.atan(1)


#______________________________________________________________________________
def get_golden_pT(L1Mu_pt, L1Mu_eta):

  ptbin = [
    2.0,   2.5,   3.0,   3.5,   4.0,   4.5,   5.0,   6.0,   7.0,   8.0,
    10.0,  12.0,  14.0,  16.0,  18.0,  20.0,  25.0,  30.0,  35.0,  40.0,
    45.0,  50.0,  60.0,  70.0,  80.0,  90.0, 100.0, 120.0, 140.0]
  L1Mu_pt_index = ptbin.index(L1Mu_pt)

  ## look-up-tables


#______________________________________________________________________________
def passDPhicutTFTrack(st, ch, dphi, pt):

  ME11GEMdPhi = [
    [-2, 1.0, 1.0],
    [5.0,  0.02131422,  0.00907379 ],
    [7.0,  0.01480166,  0.00658598 ],
    [10.0,  0.01019511,  0.00467867 ],
    [15.0,  0.00685720,  0.00336636 ],
    [20.0,  0.00528981,  0.00279064 ],
    [30.0,  0.00381797,  0.00231837 ],
    [40.0,  0.00313074,  0.00213513 ],
  ]

  ME21GEMdPhi = [
    [-2, 1.0, 1.0],
    [5.0,  0.00884066,  0.00479478 ],
    [7.0,  0.00660301,  0.00403733 ],
    [10.0,  0.00503144,  0.00369953 ],
    [15.0,  0.00409270,  0.00358023 ],
    [20.0,  0.00378257,  0.00358023 ],
    [30.0,  0.00369842,  0.00358023 ],
    [40.0,  0.00369842,  0.00358023 ],
    ]

  is_odd = ch%2==1

  returnValue = False;

  LUTsize = 8
  #smalldphi = ((is_odd and fabs(dphi)<GEMdPhi[LUTsize-2][1]) || (!is_odd and fabs(dphi)<GEMdPhi[LUTsize-2][2]));

  dPhiLib = ME11GEMdPhi
  if st==2:
    dPhiLib = ME21GEMdPhi
  if (fabs(dphi) < 99):# and ((chargesign_ == 1 and dphi < 0) || (chargesign_ == 0 and dphi > 0) || smalldphi)){
    for row in dPhiLib:
      ptValue = row[0]
      bendingOdd = row[1]
      bendingEven = row[2]

      ## check with odd/even value
      if pt >= ptValue:

        ## check if pass/fail
        if ((is_odd and bendingOdd > fabs(dphi)) or (not is_odd and bendingEven > fabs(dphi))):
          returnValue = True;
        else:
          returnValue = False;
  else:
    returnValue = False;

  return returnValue


#______________________________________________________________________________
def fitStraightLine(v, w, debug=False):
    alpha = 0
    beta = 0

    if len(v)<=2: return alpha, beta,-1,0

    if v[0] < v[-1]:
        zmin = v[0]
        zmax = v[-1]
    else:
        zmin = v[-1]
        zmax = v[0]

    fit1 = TF1("fit1","pol1",zmin,zmax)
    gr = TGraph(len(v),array.array("f",v), array.array("f",w));
    gr.Fit(fit1,"RQ")

    alpha = fit1.GetParameter(0)#; //value of 0th parameter
    beta  = fit1.GetParameter(1)#; //value of 1st parameter
    chi2 = fit1.GetChisquare()
    ndf = fit1.GetNDF()

    #print "\tfit params",alpha, beta, chi2, ndf
    return alpha, beta, chi2, ndf

def getFittedPositions(xs, zs):

    st_input = []
    xs_input = []
    zs_input = []

    if xs[0]!=99 and zs[0]!=99:
        st_input.append(1)
        xs_input.append(xs[0])
        zs_input.append(zs[0])

    if xs[1]!=99 and zs[1]!=99:
        st_input.append(2)
        xs_input.append(xs[1])
        zs_input.append(zs[1])

    if xs[2]!=99 and zs[2]!=99:
        st_input.append(3)
        xs_input.append(xs[2])
        zs_input.append(zs[2])

    if xs[3]!=99 and zs[3]!=99:
        st_input.append(4)
        xs_input.append(xs[3])
        zs_input.append(zs[3])

    alpha_x, beta_x, chi2_x, ndf_x = fitStraightLine(zs_input, xs_input)

    ## check if fit was good
    xs_output = []
    chi2ndf_x = 0
    if alpha_x != 0 and beta_x != 0:
      if ndf_x!=0:
        chi2ndf_x = chi2_x/ndf_x
      else:
        chi2ndf_x = chi2_x

      for i in range(0,len(zs_input)):
        xs_output.append(alpha_x + beta_x * zs_input[i])
    else:
      xs_output = xs_input

    return xs_output, st_input, chi2ndf_x


def frange(end,start=0,inc=0,precision=1):
    """A range function that accepts float increments."""
    import math

    if not start:
        start = end + 0.0
        end = 0.0
    else: end += 0.0

    if not inc:
        inc = 1.0
    count = int(math.ceil((start - end) / inc))

    L = [None] * count

    L[0] = end
    for i in (xrange(1,count)):
        L[i] = L[i-1] + inc
    return L



#______________________________________________________________________________
def getBestValue(value1, value2):
    if abs(value1) != 99.: return value1
    else:                  return value2



#______________________________________________________________________________
def getRadius(padSize, eta, doFit):
    radius_dict = {}
    radius_dict['pad1_eta12to14_withoutLCTFit'] = 0
    radius_dict['pad2_eta12to14_withoutLCTFit'] = 0
    radius_dict['pad4_eta12to14_withoutLCTFit'] = 0
    radius_dict['pad8_eta12to14_withoutLCTFit'] = 0

    radius_dict['pad1_eta14to16_withoutLCTFit'] = 0
    radius_dict['pad2_eta14to16_withoutLCTFit'] = 0
    radius_dict['pad4_eta14to16_withoutLCTFit'] = 0
    radius_dict['pad8_eta14to16_withoutLCTFit'] = 0

    radius_dict['pad1_eta16to18_withoutLCTFit'] = 2.5
    radius_dict['pad2_eta16to18_withoutLCTFit'] = 2.6
    radius_dict['pad4_eta16to18_withoutLCTFit'] = 2.7
    radius_dict['pad8_eta16to18_withoutLCTFit'] = 3.4

    radius_dict['pad1_eta18to20_withoutLCTFit'] = 2.3
    radius_dict['pad2_eta18to20_withoutLCTFit'] = 2.4
    radius_dict['pad4_eta18to20_withoutLCTFit'] = 2.6
    radius_dict['pad8_eta18to20_withoutLCTFit'] = 3.0

    radius_dict['pad1_eta20to22_withoutLCTFit'] = 2.2
    radius_dict['pad2_eta20to22_withoutLCTFit'] = 2.3
    radius_dict['pad4_eta20to22_withoutLCTFit'] = 2.5
    radius_dict['pad8_eta20to22_withoutLCTFit'] = 3.1


    radius_dict['pad1_eta12to14_withLCTFit'] = 0
    radius_dict['pad2_eta12to14_withLCTFit'] = 0
    radius_dict['pad4_eta12to14_withLCTFit'] = 0
    radius_dict['pad8_eta12to14_withLCTFit'] = 0

    radius_dict['pad1_eta14to16_withLCTFit'] = 0
    radius_dict['pad2_eta14to16_withLCTFit'] = 0
    radius_dict['pad4_eta14to16_withLCTFit'] = 0
    radius_dict['pad8_eta14to16_withLCTFit'] = 0

    radius_dict['pad1_eta16to18_withLCTFit'] = 2.1
    radius_dict['pad2_eta16to18_withLCTFit'] = 2.0
    radius_dict['pad4_eta16to18_withLCTFit'] = 2.2
    radius_dict['pad8_eta16to18_withLCTFit'] = 3.0

    radius_dict['pad1_eta18to20_withLCTFit'] = 2.2
    radius_dict['pad2_eta18to20_withLCTFit'] = 2.2
    radius_dict['pad4_eta18to20_withLCTFit'] = 2.4
    radius_dict['pad8_eta18to20_withLCTFit'] = 3.1

    radius_dict['pad1_eta20to22_withLCTFit'] = 2.1
    radius_dict['pad2_eta20to22_withLCTFit'] = 2.2
    radius_dict['pad4_eta20to22_withLCTFit'] = 2.3
    radius_dict['pad8_eta20to22_withLCTFit'] = 3.0

    if doFit:
        fitString = '_withLCTFit'
    else:
        fitString = '_withoutLCTFit'

    return radius_dict[padSize + '_eta' + eta + fitString]

#______________________________________________________________________________
def passEllipseCut(DDY123, delta_phi_dir,
                   padSize, eta, doFit):
    radius = getRadius(padSize, eta, doFit)
    scaleFactor = 50
    x2value = DDY123 * DDY123
    yvalue = scaleFactor * delta_phi_dir
    y2value = yvalue * yvalue

    return  x2value + y2value <= radius*radius


#______________________________________________________________________________
def pt_from_DPhi_DT(DPhi, DT_type):

    Pt_dict = {}
    DPhi_dict = {}

    Pt_dict['DT1_DT2'] =  [3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 11.0, 13.0, 15.0, 17.0, 19.0, 22.0, 26.0, 30.0, 34.0, 39.0, 46.0, 55.0]
    DPhi_dict['DT1_DT2'] =  [0.3092222222222223, 0.15859793814433001, 0.10226506024096395, 0.07503067484662582, 0.05959266055045877, 0.05363519313304725, 0.04648048048048052, 0.03838693467336686, 0.036337468982630294, 0.03297127222982218, 0.031985267034990814, 0.028920821114369534, 0.024994444444444482, 0.02293392070484583, 0.02709333333333337, 0.027034482758620717, 0.026360655737704942, 0.02350000000000004, 0.019245901639344264]

    Pt_dict['DT1_DT3'] =  [3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 11.0, 13.0, 15.0, 17.0, 19.0, 22.0, 26.0, 30.0, 34.0, 39.0, 46.0, 55.0]
    DPhi_dict['DT1_DT3'] =  [0.5794285714285715, 0.4061290322580646, 0.24006593406593404, 0.1740962566844919, 0.13864000000000012, 0.11706944444444455, 0.09911731843575426, 0.08540215053763447, 0.07168650793650799, 0.06087947882736163, 0.054080808080808125, 0.05051428571428576, 0.04328708133971295, 0.03914501891551074, 0.03793039443155455, 0.03399082568807342, 0.032557142857142875, 0.0290857142857143, 0.027600000000000027]

    Pt_dict['DT1_DT4'] =  [4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 11.0, 13.0, 15.0, 17.0, 19.0, 22.0, 26.0, 30.0, 34.0, 39.0, 46.0, 55.0]
    DPhi_dict['DT1_DT4'] =  [0.6350000000000002, 0.3602142857142858, 0.27009677419354844, 0.20673076923076922, 0.17068571428571422, 0.13912663755458526, 0.11520627802690593, 0.09131972789115654, 0.07617314487632515, 0.06748120300751885, 0.057713754646840185, 0.05274870017331027, 0.04392118226600989, 0.03952000000000001, 0.037006993006993026, 0.0378913043478261, 0.035904761904761925, 0.02742857142857146]

    Pt_dict['DT2_DT3'] =  [3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 11.0, 13.0, 15.0, 17.0, 19.0, 22.0, 26.0, 30.0, 34.0, 39.0, 46.0, 55.0]
    DPhi_dict['DT2_DT3'] =  [0.47866666666666663, 0.2976888888888889, 0.16729629629629625, 0.11855445544554463, 0.09121348314606749, 0.07903641456582639, 0.06995000000000007, 0.058024213075060574, 0.05053438113948924, 0.04337685459940657, 0.038142025611175814, 0.03852050473186122, 0.03577720207253888, 0.035367647058823545, 0.03492946058091288, 0.029878260869565236, 0.02484057971014495, 0.022296296296296324, 0.02742857142857146]

    Pt_dict['DT2_DT4'] =  [3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 11.0, 13.0, 15.0, 17.0, 19.0, 22.0, 26.0, 30.0, 34.0, 39.0, 46.0, 55.0]
    DPhi_dict['DT2_DT4'] =  [0.55999999999999996, 0.5315000000000001, 0.31116666666666676, 0.22686046511627905, 0.16912244897959178, 0.13808612440191398, 0.11484259259259269, 0.09437422037422044, 0.07341991341991348, 0.06232067510548531, 0.055694623655914016, 0.05155477031802124, 0.04097674418604654, 0.039551976573938524, 0.039281437125748525, 0.03600000000000002, 0.036725274725274745, 0.03763636363636366, 0.033500000000000016]

    Pt_dict['DT3_DT4'] =  [4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 11.0, 13.0, 15.0, 17.0, 19.0, 22.0, 26.0, 30.0, 34.0, 39.0, 46.0, 55.0]
    DPhi_dict['DT3_DT4'] =  [0.39566666666666683, 0.1937083333333333, 0.13500854700854711, 0.09933877551020416, 0.07972674418604658, 0.06907392996108956, 0.055785145888594206, 0.0448070175438597, 0.039066246056782356, 0.03757730496453903, 0.03635728952772076, 0.034125673249551194, 0.03377186311787073, 0.030579710144927556, 0.028075949367088637, 0.025615384615384623, 0.03172727272727277, 0.027750000000000025]

    DPhi_range = DPhi_dict[DT_type]
    pt_range = DPhi_dict[DT_type]

    found_pt = 0
    ## in case the DDY123 is larger than the first value, assign it pt = 2 GeV
    if DPhi > DPhi_range[0]:
      found_pt = 3.5
    elif DPhi < DPhi_range[-1]:
      found_pt = 55
    else:
      for ii in range(0,len(DPhi_range)):
        if DPhi > DPhi_range[ii]:
          found_pt = pt_range[ii-1]
          break

    return found_pt

#______________________________________________________________________________
def pt_from_DDY123(DDY123, eta, parity, doFit):

    DDY123_dict = {}


    DDY123_dict['eta12to14_oee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0]
    DDY123_dict['eta12to14_oee_withoutLCTFit_y'] =  [15.58, 16.76, 10.720000000000002, 6.42, 5.870000000000001, 5.16, 3.18, 3.5600000000000005, 2.5400000000000005, 2.64, 2.24, 1.8900000000000001, 2.8800000000000003, 1.96, 0.7800000000000001, 1.6800000000000002, 0.9600000000000001]

    DDY123_dict['eta12to14_oee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0]
    DDY123_dict['eta12to14_oee_withLCTFit_y'] =  [19.96, 16.76, 10.96, 7.62, 6.340000000000001, 5.36, 3.5900000000000003, 3.9600000000000004, 3.27, 2.72, 2.24, 1.8900000000000001, 3.2800000000000002, 2.3600000000000003, 0.9800000000000001, 2.08, 0.9800000000000001]



    DDY123_dict['eta14to16_oee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 41.0, 43.0]
    DDY123_dict['eta14to16_oee_withoutLCTFit_y'] =  [18.88, 14.640000000000002, 9.260000000000002, 7.380000000000001, 4.380000000000001, 3.7600000000000002, 3.3000000000000003, 15.0, 3.18, 2.49, 5.5, 1.8800000000000001, 16.16, 0.18000000000000002, 1.7200000000000002, 0.5800000000000001, 1.1600000000000001, 0.7800000000000001, 0.7800000000000001]

    DDY123_dict['eta14to16_oee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 41.0, 43.0]
    DDY123_dict['eta14to16_oee_withLCTFit_y'] =  [18.88, 13.06, 9.660000000000002, 7.19, 5.580000000000001, 4.32, 3.5600000000000005, 6.0200000000000005, 3.3800000000000003, 2.5900000000000003, 5.7, 1.8800000000000001, 17.36, 0.5800000000000001, 2.3200000000000003, 0.18000000000000002, 1.1600000000000001, 0.18000000000000002, 0.9800000000000001]

    DDY123_dict['eta16to18_oee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 49.0, 53.0]
    DDY123_dict['eta16to18_oee_withoutLCTFit_y'] =  [16.34, 8.3, 6.500000000000001, 5.640000000000001, 3.62, 2.7800000000000002, 1.9840000000000002, 3.3200000000000003, 2.4600000000000004, 1.82, 2.3400000000000003, 0.98, 2.7600000000000002, 1.6800000000000002, 1.5400000000000003, 2.9200000000000004, 1.7200000000000002, 0.36000000000000004, 1.3600000000000003, 19.8, 0.7800000000000001]



    DDY123_dict['eta16to18_oee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 49.0, 53.0]
    DDY123_dict['eta16to18_oee_withLCTFit_y'] =  [16.68, 7.750000000000001, 6.740000000000001, 5.880000000000002, 3.6133333333333333, 2.5900000000000003, 2.0533333333333332, 1.9800000000000002, 2.66, 1.5100000000000002, 2.3600000000000003, 1.34, 1.1800000000000002, 1.8800000000000001, 1.5400000000000003, 2.74, 1.3600000000000003, 0.38, 1.1600000000000001, 19.8, 0.5800000000000001]

    DDY123_dict['eta18to20_oee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 51.0, 53.0]
    DDY123_dict['eta18to20_oee_withoutLCTFit_y'] =  [15.520000000000001, 6.940000000000001, 4.1066666666666665, 3.85, 2.615, 3.3200000000000003, 2.4400000000000004, 1.9466666666666668, 2.1300000000000003, 1.7800000000000002, 2.18, 2.14, 2.12, 1.3000000000000003, 1.1800000000000002, 0.9400000000000001, 0.7500000000000001, 7.04, 1.9000000000000001, 0.7200000000000001, 0.7400000000000001, 7.48, 0.7600000000000001, 0.9600000000000001, 0.18000000000000002]

    DDY123_dict['eta18to20_oee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 51.0, 53.0]
    DDY123_dict['eta18to20_oee_withLCTFit_y'] =  [16.490000000000002, 7.130000000000001, 3.66, 3.480000000000001, 2.3725000000000005, 3.07, 2.5700000000000007, 1.5566666666666669, 2.14, 2.7600000000000002, 3.8000000000000003, 5.800000000000001, 2.14, 1.1400000000000001, 0.9800000000000002, 0.7850000000000001, 0.5666666666666667, 6.840000000000001, 0.92, 0.7200000000000001, 0.7600000000000001, 2.3000000000000003, 0.56, 0.56, 0.38]


    DDY123_dict['eta20to22_oee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 45.0, 47.0, 51.0, 55.0]
    DDY123_dict['eta20to22_oee_withoutLCTFit_y'] =  [8.88, 4.550000000000001, 4.0200000000000005, 3.18, 3.060000000000001, 1.6400000000000003, 2.65, 6.180000000000001, 1.5200000000000005, 1.2933333333333334, 2.12, 3.08, 3.0, 1.62, 3.9400000000000004, 0.9, 2.4000000000000004, 0.8600000000000001, 0.5, 0.18000000000000002, 0.18000000000000002, 0.9600000000000001, 10.58, 13.98]


    DDY123_dict['eta20to22_oee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 45.0, 47.0, 51.0, 55.0]
    DDY123_dict['eta20to22_oee_withLCTFit_y'] =  [9.14, 5.620000000000001, 8.260000000000002, 2.7, 2.6800000000000006, 1.3200000000000003, 1.3400000000000003, 8.62, 0.9600000000000002, 0.9933333333333334, 2.2800000000000007, 3.3200000000000003, 0.5533333333333335, 0.4600000000000001, 3.16, 0.8, 2.3000000000000003, 0.55, 0.5, 0.18000000000000002, 0.18000000000000002, 0.7600000000000001, 10.58, 19.8]





    DDY123_dict['eta22to24_oee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 53.0]
    DDY123_dict['eta22to24_oee_withoutLCTFit_y'] =  [4.573333333333334, 1.8, 1.4950000000000003, 2.8200000000000007, 2.12, 5.880000000000002, 1.3900000000000001, 1.7300000000000002, 3.12, 0.9600000000000002, 2.3000000000000003, 1.06, 1.5200000000000002, 0.54, 2.3600000000000003, 1.9800000000000002, 0.37, 0.5, 1.98, 0.7200000000000001, 0.38, 0.38, 0.38]

    DDY123_dict['eta22to24_oee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 53.0]
    DDY123_dict['eta22to24_oee_withLCTFit_y'] =  [4.78, 1.5766666666666669, 1.7000000000000002, 1.5600000000000007, 2.18, 6.3, 0.9600000000000001, 1.5600000000000003, 1.7800000000000002, 0.7733333333333335, 1.3000000000000003, 0.7000000000000001, 1.7200000000000002, 0.39000000000000007, 2.3600000000000003, 1.9800000000000002, 0.18000000000000002, 0.3666666666666667, 1.58, 0.7200000000000001, 0.38, 0.18000000000000002, 0.18000000000000002]


    DDY123_dict['eta12to14_ooo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 53.0, 55.0, 57.0]
    DDY123_dict['eta12to14_ooo_withoutLCTFit_y'] =  [15.870000000000001, 7.746666666666668, 4.915000000000001, 3.5933333333333346, 2.462500000000001, 2.06, 1.7914285714285716, 1.5600000000000003, 1.6833333333333333, 1.3375000000000004, 1.2890909090909093, 1.3085714285714287, 1.1033333333333335, 1.2466666666666668, 0.9942857142857143, 0.8900000000000001, 1.01, 1.04, 0.8800000000000001, 0.6200000000000002, 0.51, 8.12, 0.7600000000000001, 6.18, 1.5400000000000003, 0.56, 0.18000000000000002, 0.5800000000000001]

    DDY123_dict['eta12to14_ooo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 53.0, 55.0, 57.0]
    DDY123_dict['eta12to14_ooo_withLCTFit_y'] =  [15.940000000000001, 7.620000000000001, 4.972000000000001, 3.436666666666667, 2.365, 1.9600000000000004, 1.6175000000000004, 1.4140000000000001, 1.58, 1.190909090909091, 1.196, 1.1371428571428575, 0.9871428571428572, 1.028, 0.9920000000000001, 0.7400000000000001, 0.8733333333333335, 0.76, 0.54, 0.51, 0.7100000000000001, 8.12, 0.56, 6.18, 1.3400000000000003, 0.36000000000000004, 0.38, 0.5800000000000001]





    DDY123_dict['eta14to16_ooo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0]
    DDY123_dict['eta14to16_ooo_withoutLCTFit_y'] =  [13.82, 5.986666666666668, 3.744, 2.7233333333333336, 2.4371428571428577, 2.0920000000000005, 1.6760000000000004, 1.4150000000000003, 1.3111111111111113, 1.21, 1.1675000000000002, 1.0733333333333335, 1.0700000000000005, 0.9514285714285715, 0.9500000000000002, 0.7571428571428573, 1.01, 0.5333333333333334, 1.12, 1.1800000000000002, 0.88, 1.08, 0.54, 0.7800000000000001, 0.5800000000000001]

    DDY123_dict['eta14to16_ooo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0]
    DDY123_dict['eta14to16_ooo_withLCTFit_y'] =  [13.71, 6.140000000000001, 3.7800000000000002, 2.676, 2.3000000000000003, 2.0199999999999996, 1.5755555555555558, 1.1952941176470588, 1.2000000000000002, 1.17, 1.1350000000000002, 0.7900000000000001, 0.9880000000000001, 0.932, 0.9000000000000005, 0.7750000000000001, 0.9100000000000001, 0.5333333333333334, 0.92, 1.1800000000000002, 0.7400000000000001, 1.08, 0.54, 0.38, 0.38]








    DDY123_dict['eta16to18_ooo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 51.0]
    DDY123_dict['eta16to18_ooo_withoutLCTFit_y'] =  [16.6, 9.660000000000002, 3.97, 2.3600000000000003, 4.44, 2.14, 1.6700000000000002, 1.7200000000000004, 1.3800000000000003, 2.6600000000000006, 5.08, 7.260000000000001, 1.82, 1.9600000000000002, 2.02, 1.2000000000000002, 1.6600000000000001, 0.18000000000000002, 0.7600000000000001, 0.37, 0.38, 1.18, 0.18000000000000002]

    DDY123_dict['eta16to18_ooo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 51.0]
    DDY123_dict['eta16to18_ooo_withLCTFit_y'] =  [16.62, 7.920000000000001, 3.99, 2.2500000000000004, 4.44, 1.72, 1.3800000000000003, 1.3266666666666669, 1.4800000000000002, 1.34, 5.08, 7.08, 1.7100000000000002, 0.7900000000000001, 2.62, 1.2000000000000002, 0.4600000000000001, 0.56, 1.56, 0.3400000000000001, 0.38, 0.5800000000000001, 0.38]







    DDY123_dict['eta18to20_ooo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 51.0, 53.0, 57.0]
    DDY123_dict['eta18to20_ooo_withoutLCTFit_y'] =  [14.64, 4.66, 4.9, 2.3000000000000016, 4.180000000000001, 1.385714285714286, 1.7266666666666668, 1.7800000000000002, 3.4600000000000004, 2.1100000000000003, 1.6600000000000006, 3.7, 1.3400000000000005, 8.040000000000001, 5.14, 1.34, 3.22, 0.5, 9.52, 4.74, 15.5, 0.56, 1.3600000000000003, 1.18, 0.36000000000000004, 0.18000000000000002]



    DDY123_dict['eta18to20_ooo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 51.0, 53.0, 57.0]
    DDY123_dict['eta18to20_ooo_withLCTFit_y'] =  [9.46, 4.566666666666667, 4.36, 1.9300000000000004, 1.7685714285714287, 1.1300000000000001, 1.3850000000000005, 1.0600000000000003, 3.24, 0.9800000000000001, 0.91, 1.3000000000000005, 1.08, 8.240000000000002, 0.9800000000000002, 0.7400000000000001, 0.8400000000000001, 0.5, 8.32, 5.14, 15.3, 0.56, 1.3600000000000003, 19.8, 0.36000000000000004, 0.18000000000000002]





    DDY123_dict['eta20to22_ooo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0]
    DDY123_dict['eta20to22_ooo_withoutLCTFit_y'] =  [8.5, 3.560000000000001, 1.9700000000000002, 2.5600000000000005, 2.3400000000000003, 1.306666666666667, 2.880000000000001, 1.086666666666667, 2.5400000000000005, 0.7100000000000002, 2.3800000000000003, 1.02, 4.36, 0.9600000000000001, 1.03, 0.9400000000000001, 10.48, 0.7200000000000001, 2.33, 0.36000000000000004, 0.52, 0.18000000000000002, 0.38, 0.38]

    DDY123_dict['eta20to22_ooo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0]
    DDY123_dict['eta20to22_ooo_withLCTFit_y'] =  [6.460000000000001, 5.48, 1.5840000000000003, 2.340000000000001, 1.184, 0.8560000000000002, 2.2800000000000002, 0.8800000000000003, 2.2600000000000007, 0.5342857142857144, 3.9800000000000004, 0.9, 4.220000000000001, 1.5200000000000002, 0.7000000000000001, 0.7400000000000001, 2.3000000000000003, 0.52, 2.33, 0.48000000000000004, 0.32000000000000006, 0.18000000000000002, 0.18000000000000002, 0.18000000000000002]







    DDY123_dict['eta22to24_ooo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 59.0]
    DDY123_dict['eta22to24_ooo_withoutLCTFit_y'] =  [5.840000000000001, 7.300000000000001, 3.3100000000000005, 2.3600000000000003, 2.4600000000000004, 2.2199999999999998, 5.28, 3.74, 1.82, 0.49000000000000016, 6.1, 0.39000000000000007, 6.260000000000001, 5.94, 8.46, 0.52, 0.38, 0.7200000000000001, 0.36000000000000004, 2.9400000000000004, 0.7600000000000001, 8.96, 0.36000000000000004, 1.58, 0.18000000000000002, 0.7800000000000001]



    DDY123_dict['eta22to24_ooo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 59.0]
    DDY123_dict['eta22to24_ooo_withLCTFit_y'] =  [7.5200000000000005, 7.36, 3.3400000000000003, 2.8000000000000003, 1.9400000000000004, 1.84, 5.680000000000001, 2.7800000000000002, 1.6800000000000006, 0.375, 5.9, 0.5200000000000002, 6.28, 5.54, 8.260000000000002, 0.52, 0.37, 0.32000000000000006, 0.18000000000000002, 0.38, 0.18000000000000002, 16.560000000000002, 0.36000000000000004, 19.8, 0.54, 0.38]


    DDY123_dict['eta12to14_eee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 53.0, 55.0, 57.0]
    DDY123_dict['eta12to14_eee_withoutLCTFit_y'] =  [18.06, 16.046666666666667, 9.946666666666667, 6.355, 4.956666666666668, 3.846666666666667, 3.234285714285715, 3.2533333333333343, 2.5600000000000005, 2.4800000000000004, 2.5363636363636366, 2.1500000000000004, 2.286666666666667, 1.7000000000000008, 1.7800000000000002, 1.7200000000000004, 1.6466666666666667, 1.6400000000000001, 1.82, 1.1966666666666668, 6.04, 2.08, 0.7000000000000001, 3.5000000000000004, 0.9800000000000001, 0.56, 0.18000000000000002, 1.5200000000000002]

    DDY123_dict['eta12to14_eee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 53.0, 55.0, 57.0]
    DDY123_dict['eta12to14_eee_withLCTFit_y'] =  [18.560000000000002, 15.940000000000003, 9.860000000000001, 6.17, 4.908000000000001, 3.585555555555556, 3.1822222222222223, 3.2720000000000002, 2.493333333333334, 2.39, 2.3222222222222224, 1.9500000000000002, 2.115, 1.5875000000000004, 1.5450000000000004, 1.5066666666666668, 1.3800000000000003, 1.3733333333333335, 1.4200000000000002, 1.1685714285714286, 5.640000000000001, 1.2800000000000002, 0.7000000000000001, 3.3000000000000003, 0.7800000000000001, 0.56, 0.18000000000000002, 1.5200000000000002]





    DDY123_dict['eta14to16_eee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 55.0, 59.0]
    DDY123_dict['eta14to16_eee_withoutLCTFit_y'] =  [15.760000000000002, 11.540000000000001, 6.86, 4.9, 4.260000000000002, 3.4466666666666668, 3.166666666666667, 2.805, 2.5700000000000003, 2.293333333333334, 2.9100000000000006, 1.926666666666667, 3.2200000000000006, 1.7400000000000002, 1.7000000000000002, 1.1500000000000001, 4.220000000000001, 1.3900000000000001, 4.640000000000001, 1.04, 1.04, 0.9, 0.38, 0.18000000000000002, 0.38, 0.56, 0.18000000000000002]

    DDY123_dict['eta14to16_eee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 55.0, 59.0]
    DDY123_dict['eta14to16_eee_withLCTFit_y'] =  [15.760000000000002, 11.920000000000002, 7.029999999999999, 4.740000000000001, 4.130000000000001, 3.2680000000000002, 3.250000000000001, 2.7100000000000004, 2.3133333333333335, 2.04, 2.8200000000000007, 1.9900000000000002, 3.7100000000000004, 1.5666666666666669, 1.7000000000000002, 1.1, 4.0200000000000005, 1.4900000000000002, 4.44, 0.8400000000000001, 0.8400000000000001, 0.9, 0.38, 0.38, 0.5800000000000001, 0.7600000000000001, 0.38]






    DDY123_dict['eta16to18_eee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0]
    DDY123_dict['eta16to18_eee_withoutLCTFit_y'] =  [19.340000000000003, 11.4, 6.6000000000000005, 4.790000000000001, 3.6933333333333334, 3.086666666666667, 3.253333333333334, 3.880000000000001, 3.5800000000000005, 2.3500000000000005, 3.12, 2.4000000000000004, 3.9200000000000004, 1.5466666666666669, 3.8400000000000003, 5.660000000000001, 1.3100000000000003, 1.5200000000000002, 6.28, 1.7200000000000002, 1.9400000000000002, 6.16]

    DDY123_dict['eta16to18_eee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0]
    DDY123_dict['eta16to18_eee_withLCTFit_y'] =  [17.76, 11.330000000000002, 6.21, 4.980000000000001, 3.833333333333334, 3.1133333333333337, 2.7560000000000002, 4.300000000000001, 3.6600000000000006, 2.14, 2.08, 2.6, 3.5200000000000005, 1.3300000000000003, 2.64, 5.660000000000001, 1.3100000000000003, 1.1600000000000001, 5.28, 1.9200000000000002, 0.9400000000000001, 5.760000000000001]

    DDY123_dict['eta18to20_eee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 59.0]
    DDY123_dict['eta18to20_eee_withoutLCTFit_y'] =  [13.88, 9.06, 4.335, 3.4550000000000005, 2.9933333333333336, 2.3933333333333335, 2.2500000000000004, 1.97, 1.84, 2.4400000000000004, 1.5200000000000002, 1.3700000000000003, 1.6800000000000002, 1.1866666666666668, 1.86, 1.07, 1.9200000000000002, 4.640000000000001, 0.5, 11.240000000000002, 1.18, 0.7400000000000001, 2.7800000000000002]



    DDY123_dict['eta18to20_eee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 59.0]
    DDY123_dict['eta18to20_eee_withLCTFit_y'] =  [14.720000000000002, 8.58, 4.370000000000001, 2.963333333333334, 2.64, 2.293333333333334, 2.2300000000000004, 1.9500000000000004, 1.5300000000000005, 2.3000000000000007, 1.3700000000000003, 1.1266666666666667, 1.9500000000000002, 1.19, 1.8800000000000001, 0.9600000000000002, 1.7200000000000002, 3.64, 0.6000000000000001, 10.64, 19.8, 0.54, 2.7800000000000002]








    DDY123_dict['eta20to22_eee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 51.0]
    DDY123_dict['eta20to22_eee_withoutLCTFit_y'] =  [8.78, 3.3000000000000007, 3.3000000000000003, 1.9900000000000002, 2.89, 1.7750000000000004, 3.1200000000000006, 4.2, 0.9600000000000001, 1.14, 3.4000000000000004, 2.5800000000000005, 0.76, 1.4800000000000002, 1.7600000000000002, 0.6000000000000001, 7.08, 0.7200000000000001, 0.5800000000000001, 0.18000000000000002, 0.5800000000000001, 2.12, 0.7800000000000001]



    DDY123_dict['eta20to22_eee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 51.0]
    DDY123_dict['eta20to22_eee_withLCTFit_y'] =  [12.22, 3.3600000000000003, 3.4400000000000004, 2.7, 2.67, 1.6400000000000001, 2.2200000000000006, 4.3, 0.7925000000000002, 0.6880000000000002, 0.8600000000000003, 4.820000000000001, 0.5866666666666667, 0.7066666666666668, 1.7800000000000002, 0.6200000000000002, 7.48, 0.7200000000000001, 0.38, 0.3400000000000001, 0.5800000000000001, 2.12, 19.8]





    DDY123_dict['eta22to24_eee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 45.0, 47.0]
    DDY123_dict['eta22to24_eee_withoutLCTFit_y'] =  [4.44, 6.61, 2.2800000000000002, 6.5, 2.8000000000000003, 3.8200000000000003, 4.58, 2.3800000000000003, 9.16, 3.4200000000000004, 6.2, 0.8400000000000003, 2.3200000000000003, 11.660000000000002, 4.760000000000001, 7.660000000000001, 0.7200000000000001, 0.7600000000000001, 3.7600000000000002, 1.58, 0.38]

    DDY123_dict['eta22to24_eee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 45.0, 47.0]
    DDY123_dict['eta22to24_eee_withLCTFit_y'] =  [4.500000000000001, 6.44, 2.6199999999999997, 8.42, 2.5666666666666673, 3.700000000000001, 7.24, 2.2, 10.200000000000001, 3.24, 6.2, 0.6600000000000003, 1.96, 11.860000000000001, 4.960000000000001, 7.0600000000000005, 0.92, 0.7600000000000001, 3.5600000000000005, 1.98, 0.5800000000000001]

    DDY123_dict['eta12to14_eoo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 31.0, 33.0, 39.0, 43.0]
    DDY123_dict['eta12to14_eoo_withoutLCTFit_y'] =  [10.540000000000001, 9.360000000000001, 5.22, 6.04, 2.880000000000001, 2.3000000000000003, 2.9800000000000004, 3.0, 2.9400000000000004, 2.4000000000000004, 1.6900000000000002, 0.9466666666666668, 0.9600000000000001, 0.18000000000000002, 0.18000000000000002, 8.360000000000001]

    DDY123_dict['eta12to14_eoo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 31.0, 33.0, 39.0, 43.0]
    DDY123_dict['eta12to14_eoo_withLCTFit_y'] =  [11.14, 9.32, 5.42, 6.44, 3.4400000000000004, 2.9000000000000004, 2.9800000000000004, 2.6, 2.8800000000000003, 2.6, 1.8900000000000001, 1.2400000000000002, 0.7600000000000001, 0.38, 0.18000000000000002, 8.360000000000001]





    DDY123_dict['eta14to16_eoo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 39.0]
    DDY123_dict['eta14to16_eoo_withoutLCTFit_y'] =  [11.04, 9.600000000000001, 5.36, 7.28, 8.0, 7.0200000000000005, 3.9000000000000004, 3.2, 5.800000000000001, 2.0, 10.9, 1.9000000000000001, 9.5, 1.7400000000000002, 5.5200000000000005, 0.9800000000000001, 0.56, 0.9800000000000001]

    DDY123_dict['eta14to16_eoo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 39.0]
    DDY123_dict['eta14to16_eoo_withLCTFit_y'] =  [11.04, 9.8, 4.98, 7.48, 7.800000000000001, 5.44, 3.5000000000000004, 3.2, 5.800000000000001, 1.8, 11.1, 1.5000000000000002, 9.3, 2.3400000000000003, 4.920000000000001, 0.9800000000000001, 0.18000000000000002, 0.9800000000000001]





    DDY123_dict['eta16to18_eoo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 49.0]
    DDY123_dict['eta16to18_eoo_withoutLCTFit_y'] =  [17.400000000000002, 6.640000000000001, 3.6500000000000004, 3.5500000000000007, 2.3800000000000003, 2.39, 2.72, 2.4200000000000004, 1.155, 1.3600000000000003, 1.2200000000000002, 1.02, 10.42, 3.4000000000000004, 6.24, 1.3200000000000003, 3.9000000000000004, 19.92, 0.7600000000000001, 0.38, 0.9400000000000001, 0.3400000000000001]

    DDY123_dict['eta16to18_eoo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 49.0]
    DDY123_dict['eta16to18_eoo_withLCTFit_y'] =  [18.0, 5.880000000000001, 3.520000000000001, 3.16, 2.0, 1.8, 2.3400000000000003, 2.6100000000000003, 1.2200000000000002, 1.5600000000000003, 1.11, 1.02, 11.42, 3.4000000000000004, 6.24, 1.5200000000000002, 3.9000000000000004, 0.18000000000000002, 0.7600000000000001, 0.18000000000000002, 0.7400000000000001, 0.5700000000000001]





    DDY123_dict['eta18to20_eoo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0]
    DDY123_dict['eta18to20_eoo_withoutLCTFit_y'] =  [10.540000000000001, 4.710000000000001, 2.5500000000000007, 2.66, 2.326666666666667, 3.34, 1.746666666666667, 1.2200000000000002, 5.480000000000001, 2.04, 2.0600000000000005, 1.8, 3.9200000000000004, 2.7, 1.3900000000000001, 0.6800000000000002, 0.7600000000000002, 1.9000000000000001, 3.24, 0.48000000000000004, 0.18000000000000002, 0.56, 0.38, 14.340000000000002]

    DDY123_dict['eta18to20_eoo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0]
    DDY123_dict['eta18to20_eoo_withLCTFit_y'] =  [10.82, 3.5680000000000005, 2.16, 2.5600000000000005, 1.645, 2.3600000000000008, 1.2550000000000003, 0.9766666666666669, 5.22, 1.7400000000000004, 0.9866666666666668, 0.84, 3.4200000000000004, 1.3700000000000003, 1.7800000000000002, 1.08, 0.7900000000000001, 1.3000000000000003, 3.04, 0.7000000000000001, 0.18000000000000002, 0.18000000000000002, 0.38, 15.96]





    DDY123_dict['eta20to22_eoo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 55.0, 57.0]
    DDY123_dict['eta20to22_eoo_withoutLCTFit_y'] =  [5.580000000000001, 2.9500000000000006, 2.5900000000000003, 1.9400000000000008, 2.06, 3.5600000000000005, 1.9466666666666668, 4.860000000000001, 1.3500000000000003, 1.3000000000000003, 1.7400000000000004, 0.9800000000000002, 2.14, 0.3685714285714286, 0.8600000000000001, 0.37, 0.42000000000000015, 1.4400000000000002, 9.12, 0.7200000000000001, 0.7600000000000001, 0.56, 0.18000000000000002, 0.18000000000000002]

    DDY123_dict['eta20to22_eoo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 55.0, 57.0]
    DDY123_dict['eta20to22_eoo_withLCTFit_y'] =  [5.420000000000001, 2.24, 1.7200000000000002, 1.0350000000000001, 1.5900000000000003, 3.63, 1.7600000000000002, 2.1400000000000006, 1.6, 0.8733333333333335, 4.0200000000000005, 0.42000000000000015, 9.4, 0.7800000000000002, 0.6600000000000001, 0.18000000000000002, 0.37, 11.64, 9.12, 0.92, 0.18000000000000002, 0.56, 0.5800000000000001, 0.18000000000000002]






    DDY123_dict['eta22to24_eoo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0]
    DDY123_dict['eta22to24_eoo_withoutLCTFit_y'] =  [4.660000000000001, 2.900000000000001, 3.3600000000000008, 1.7600000000000007, 3.4400000000000004, 3.4800000000000004, 2.7000000000000006, 0.7850000000000003, 3.4400000000000004, 4.9, 1.7400000000000004, 1.11, 2.3600000000000003, 1.2000000000000002, 0.5750000000000001, 3.4400000000000004, 0.6000000000000001, 5.38, 2.5600000000000005, 2.14, 0.36000000000000004, 0.5700000000000001, 0.56]

    DDY123_dict['eta22to24_eoo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0]
    DDY123_dict['eta22to24_eoo_withLCTFit_y'] =  [3.5200000000000005, 2.7800000000000002, 3.1300000000000003, 1.8, 3.22, 2.5800000000000005, 0.7500000000000001, 0.5200000000000001, 3.8400000000000003, 2.3400000000000003, 0.8, 0.35750000000000004, 0.9800000000000002, 1.2000000000000002, 0.5, 3.64, 0.6000000000000001, 5.58, 2.9600000000000004, 1.9400000000000002, 0.18000000000000002, 0.18000000000000002, 0.36000000000000004]


    ## find the LUT corresponding to this particular case
    if doFit:
        fitString = '_withLCTFit'
    else:
        fitString = '_withoutLCTFit'
    xvalues = DDY123_dict["eta" + eta + '_' + parity + fitString + '_x']
    yvalues = DDY123_dict["eta" + eta + '_' + parity + fitString + '_y']

    ## get the pT value using the DDY123 at 90%
    foundPtValue = 0
    #print "deltay123", DDY123
    #print "eta" + eta + '_' + parity + fitString + '_x'
    #print xvalues
    #print yvalues
    for pp,qq in zip(xvalues, yvalues):
        #print pp,qq
        if pp <5: continue
        if DDY123 >= qq:
            foundPtValue = pp
            #print "\tOK"
            break
    #print "fount pt!!!", foundPtValue
    return foundPtValue


def pt_from_DDY123_v2(DDY123, eta, parity, doFit):

    DDY123_dict = {}

    DDY123_dict['eta12to14_oee_withoutLCTFit'] = [ 29.1746598641 ,  3.21007841215 ]

    DDY123_dict['eta12to14_oee_withLCTFit'] = [ 28.0328525528 ,  3.21527832806 ]

    DDY123_dict['eta14to16_oee_withoutLCTFit'] = [ 75.0466362387 ,  -0.416368187161 ]

    DDY123_dict['eta14to16_oee_withLCTFit'] = [ 53.5394764498 ,  1.29698265948 ]

    DDY123_dict['eta16to18_oee_withoutLCTFit'] = [ 105.949473091 ,  -9.74590656355 ]

    DDY123_dict['eta16to18_oee_withLCTFit'] = [ 99.8805188544 ,  -9.27733347846 ]

    DDY123_dict['eta18to20_oee_withoutLCTFit'] = [ 74.7149782512 ,  -8.14146416899 ]

    DDY123_dict['eta18to20_oee_withLCTFit'] = [ 74.7149782512 ,  -8.14146416899 ]

    DDY123_dict['eta20to22_oee_withoutLCTFit'] = [ 247234.212508 ,  -108820.58973 ]

    DDY123_dict['eta20to22_oee_withLCTFit'] = [ 2636717.40523 ,  -1548563.67761 ]

    DDY123_dict['eta22to24_oee_withoutLCTFit'] = [ 52.5959792946 ,  -4.2988821128 ]

    DDY123_dict['eta22to24_oee_withLCTFit'] = [ 15.490596104 ,  -3.40545579427 ]

    DDY123_dict['eta12to14_ooo_withoutLCTFit'] = [ 75.9422412646 ,  -10.5235298851 ]

    DDY123_dict['eta12to14_ooo_withLCTFit'] = [ 29.2723196576 ,  0.898359876871 ]

    DDY123_dict['eta14to16_ooo_withoutLCTFit'] = [ 23.7600385511 ,  1.56383935145 ]

    DDY123_dict['eta14to16_ooo_withLCTFit'] = [ 23.2003732246 ,  1.18938962488 ]

    DDY123_dict['eta16to18_ooo_withoutLCTFit'] = [ 128.752946445 ,  -15.246418575 ]

    DDY123_dict['eta16to18_ooo_withLCTFit'] = [ 97.333172775 ,  -17.4054927738 ]

    DDY123_dict['eta18to20_ooo_withoutLCTFit'] = [ 1277.84195015 ,  -546.405219489 ]

    DDY123_dict['eta18to20_ooo_withLCTFit'] = [ 1277.84195015 ,  -546.405219489 ]

    DDY123_dict['eta20to22_ooo_withoutLCTFit'] = [ 34.1421332913 ,  -2.32975068897 ]

    DDY123_dict['eta20to22_ooo_withLCTFit'] = [ 47.4854301454 ,  -10.1599138292 ]

    DDY123_dict['eta22to24_ooo_withoutLCTFit'] = [ 76.2948237563 ,  -17.1579686498 ]

    DDY123_dict['eta22to24_ooo_withLCTFit'] = [ 76.2948237563 ,  -17.1579686498 ]

    DDY123_dict['eta12to14_eee_withoutLCTFit'] = [ 62.7953308085 ,  0.559766040937 ]

    DDY123_dict['eta12to14_eee_withLCTFit'] = [ 46.138580523 ,  1.99654383362 ]

    DDY123_dict['eta14to16_eee_withoutLCTFit'] = [ 44.0679291943 ,  1.28571001039 ]

    DDY123_dict['eta14to16_eee_withLCTFit'] = [ 38.270397715 ,  1.84796184706 ]

    DDY123_dict['eta16to18_eee_withoutLCTFit'] = [ 72.3813362783 ,  -2.59037999073 ]

    DDY123_dict['eta16to18_eee_withLCTFit'] = [ 72.3813362783 ,  -2.59037999073 ]

    DDY123_dict['eta18to20_eee_withoutLCTFit'] = [ 72.9764118117 ,  -6.86581551453 ]

    DDY123_dict['eta18to20_eee_withLCTFit'] = [ 29.9767050806 ,  0.411973656122 ]

    DDY123_dict['eta20to22_eee_withoutLCTFit'] = [ 47.6961626762 ,  -5.08281090081 ]

    DDY123_dict['eta20to22_eee_withLCTFit'] = [ 47.6961626762 ,  -5.08281090081 ]

    DDY123_dict['eta22to24_eee_withoutLCTFit'] = [ 37.9678263807 ,  -5.37722364349 ]

    DDY123_dict['eta22to24_eee_withLCTFit'] = [ 21.6978266563 ,  -6.15349543736 ]

    DDY123_dict['eta12to14_eoo_withoutLCTFit'] = [ 30.2344766953 ,  1.59834301214 ]

    DDY123_dict['eta12to14_eoo_withLCTFit'] = [ 21.4840032122 ,  3.00165383029 ]

    DDY123_dict['eta14to16_eoo_withoutLCTFit'] = [ 29.4464445437 ,  2.95536171277 ]

    DDY123_dict['eta14to16_eoo_withLCTFit'] = [ 22.3551393097 ,  3.15080551614 ]

    DDY123_dict['eta16to18_eoo_withoutLCTFit'] = [ 152.291767071 ,  -19.746002458 ]

    DDY123_dict['eta16to18_eoo_withLCTFit'] = [ 54.728584646 ,  -5.22289694105 ]

    DDY123_dict['eta18to20_eoo_withoutLCTFit'] = [ 45.781458614 ,  -3.83083581869 ]

    DDY123_dict['eta18to20_eoo_withLCTFit'] = [ 31.10733865 ,  -5.40800001772 ]

    DDY123_dict['eta20to22_eoo_withoutLCTFit'] = [ 32.0328949638 ,  -4.05062264509 ]

    DDY123_dict['eta20to22_eoo_withLCTFit'] = [ 21.6854747814 ,  -4.00706938384 ]

    DDY123_dict['eta22to24_eoo_withoutLCTFit'] = [ 50.1562656797 ,  -11.7586485973 ]

    DDY123_dict['eta22to24_eoo_withLCTFit'] = [ 10.2787707399 ,  -2.73209394927 ]


    if doFit:
        fitString = '_withLCTFit'
    else:
        fitString = '_withoutLCTFit'
    values = DDY123_dict["eta" + eta + '_' + parity + fitString]

    if DDY123 !=0:
      foundPtValue = (values[0] / DDY123) + values[1]
    else:
      foundPtValue = (values[0] / 0.0000001) + values[1]
    return foundPtValue

#______________________________________________________________________________
def get_pt_slice(pt):
    return 0

def get_eta_partition(eta):

  etaPartition = -1
  if   (abs(eta)>=1.2 and abs(eta)<1.4): etaPartition = 0
  elif (abs(eta)>=1.4 and abs(eta)<1.6): etaPartition = 1
  elif (abs(eta)>=1.6 and abs(eta)<1.8): etaPartition = 2
  elif (abs(eta)>=1.8 and abs(eta)<2.0): etaPartition = 3
  elif (abs(eta)>=2.0 and abs(eta)<2.2): etaPartition = 4
  elif (abs(eta)>=2.2 and abs(eta)<2.4): etaPartition = 5
  return etaPartition


def get_eta_partition_GE11(eta):

  etaPartition = -1
  if   (abs(eta)>=1.6 and abs(eta)<1.8): etaPartition = 0
  elif (abs(eta)>=1.8 and abs(eta)<2.0): etaPartition = 1
  elif (abs(eta)>=2.0 and abs(eta)<2.2): etaPartition = 2
  return etaPartition

#______________________________________________________________________________
def deltay12_deltay23(x1, y1, phi1,
                      x2, y2, phi2,
                      x3, y3, phi3):
  ## reference angle
  referenceAngle = phi2

  ## calculate the difference between the y' after the transformation
  ## this function needs more information August 16th 2016
  y1_prime = - x1 * sin(referenceAngle) + y1 * cos(referenceAngle)
  y2_prime = - x2 * sin(referenceAngle) + y2 * cos(referenceAngle)
  y3_prime = - x3 * sin(referenceAngle) + y3 * cos(referenceAngle)

  deltay12 = y2_prime - y1_prime
  deltay23 = y3_prime - y2_prime
  return deltay12, deltay23


def deltay12_deltay23_R(R1, phi1,
                        R2, phi2,
                        R3, phi3):
  ## reference angle
  referenceAngle = phi2

  x1 = R1 * cos(phi1)
  x2 = R2 * cos(phi2)
  x3 = R3 * cos(phi3)

  y1 = R1 * sin(phi1)
  y2 = R2 * sin(phi2)
  y3 = R3 * sin(phi3)

  ## calculate the difference between the y' after the transformation
  ## this function needs more information August 16th 2016
  y1_prime = - x1 * sin(referenceAngle) + y1 * cos(referenceAngle)
  y2_prime = - x2 * sin(referenceAngle) + y2 * cos(referenceAngle)
  y3_prime = - x3 * sin(referenceAngle) + y3 * cos(referenceAngle)

  deltay12 = y2_prime - y1_prime
  deltay23 = y3_prime - y2_prime
  return deltay12, deltay23


#______________________________________________________________________________
def get_eta_from_Z_R(r, z):

    theta = TMath.ATan(r/z)

    returnValue = -TMath.Log(TMath.Abs(TMath.Tan(theta/2.)))
    if z<0:
      returnValue = returnValue * (-1)
    #else:
    #  returnValue = -TMath.Log(TMath.Tan(theta/2.))
    return returnValue

#______________________________________________________________________________
def get_parity(isEven1, isEven2, isEven3, isEven4):
  ## parity cases
  ## 0. odd even even
  ## 1. odd odd odd
  ## 2. even even even
  ## 3. even odd odd

  totalParity = -1
  if not isEven1 and     isEven2 and     isEven3: totalParity = 0
  if not isEven1 and not isEven2 and not isEven3: totalParity = 1
  if     isEven1 and     isEven2 and     isEven3: totalParity = 2
  if     isEven1 and not isEven2 and not isEven3: totalParity = 3
  return totalParity


def get_parity_ME11_ME21(isEven1, isEven2):
  ## parity cases
  ## 0. odd even
  ## 1. odd odd
  ## 2. even even
  ## 3. even odd

  totalParity = -1
  if not isEven1 and     isEven2: totalParity = 0
  if not isEven1 and not isEven2: totalParity = 1
  if     isEven1 and     isEven2: totalParity = 2
  if     isEven1 and not isEven2: totalParity = 3
  return totalParity

#______________________________________________________________________________
## dictionary with:
## 1. proportionality factor
## 2. slope
## 3. intercept
## numbers derived by Jose Dimas Valle
dict_prop_slope_intercept = {
  0 : {
    0 : [1.279, 0.04784, 0.1122],
    1 : [1.279, 0.65424, 0.09761],
    2 : [0.648, 0.05527, 0.08944],
    3 : [0.648, 0.08295, 0.1279],
    4 : [0.648, 0.1660, 0.2158],
    5 : [0.648, 0.4952, 0.7103],
    },
  1 : {
    0 : [0.6357, 0.0827, 0.2021],
    1 : [0.6357, 0.0906, 0.1773],
    2 : [0.3542, 0.1067, 0.1957],
    3 : [0.3542, 0.1561, 0.2645],
    4 : [0.3542, 0.3156, 0.4514],
    5 : [0.3542, 0.8242, 1.0712],
    },
  2 : {
    0 : [1.001, 0.038, 0.008345],
    1 : [1.001, 0.04157, 0.0617],
    2 : [0.5636, 0.0562, 0.08417],
    3 : [0.5636, 0.0870, 0.1426],
    4 : [0.5636, 0.1676, 0.2198],
    5 : [0.5636, 0.4953, 0.7272],
    },
  3 : {
    0 : [0.5252, 0.0739, 0.1714],
    1 : [0.5252, 0.07838, 0.1307],
    2 : [0.3217, 0.1066, 0.2026],
    3 : [0.3217, 0.1435, 0.2118],
    4 : [0.3217, 0.2874, 0.4055],
    5 : [0.3217, 0.7625, 1.075],
    }
  }


## dictionary with:
## 0. odd even even
## 1. odd odd odd
## 2. even even even
## 3. even odd odd
## numbers derived by Sven Dildick August 2016
## 1. proportionality factor
## 2. slope
## 3. intercept
dict_prop_slope_intercept_DIGIL1 = {
  0 : {
    0 : [1.1, 0.04784, 0.1122],
    1 : [1.1, 0.65424, 0.09761],
    2 : [0.64, 0.05527, 0.08944],
    3 : [0.64, 0.08295, 0.1279],
    4 : [0.6, 0.1660, 0.2158],
    5 : [0.6, 0.4952, 0.7103],
    },
  1 : {
    0 : [0.58, 0.0827, 0.2021],
    1 : [0.58, 0.0906, 0.1773],
    2 : [0.3542, 0.1067, 0.1957],
    3 : [0.3542, 0.1561, 0.2645],
    4 : [0.3542, 0.3156, 0.4514],
    5 : [0.3542, 0.8242, 1.0712],
    },
  2 : {
    0 : [1.001, 0.038, 0.008345],
    1 : [1.001, 0.04157, 0.0617],
    2 : [0.5636, 0.0562, 0.08417],
    3 : [0.5636, 0.0870, 0.1426],
    4 : [0.5636, 0.1676, 0.2198],
    5 : [0.5636, 0.4953, 0.7272],
    },
  3 : {
    0 : [0.5252, 0.0739, 0.1714],
    1 : [0.5252, 0.07838, 0.1307],
    2 : [0.3217, 0.1066, 0.2026],
    3 : [0.3217, 0.1435, 0.2118],
    4 : [0.3217, 0.2874, 0.4055],
    5 : [0.3217, 0.7625, 1.075],
  }
}


#______________________________________________________________________________
#def get_proptionality_factor(etaPartition, parity):
#  return dict_prop_slope_intercept_DIGIL1[parity][etaPartition][0]


#______________________________________________________________________________
def get_proptionality_factor(eta, parity, doFit):

    deltay12_deltay23_dict = {}
    ## new proportionality factors
    deltay12_deltay23_dict['eta12to14_oee_withoutLCTFit'] =  1.37

    deltay12_deltay23_dict['eta12to14_oee_withLCTFit'] =  1.4

    deltay12_deltay23_dict['eta14to16_oee_withoutLCTFit'] =  1.37

    deltay12_deltay23_dict['eta14to16_oee_withLCTFit'] =  1.4

    deltay12_deltay23_dict['eta16to18_oee_withoutLCTFit'] =  0.64

    deltay12_deltay23_dict['eta16to18_oee_withLCTFit'] =  0.64

    deltay12_deltay23_dict['eta18to20_oee_withoutLCTFit'] = 0.64

    deltay12_deltay23_dict['eta18to20_oee_withLCTFit'] =  0.64

    deltay12_deltay23_dict['eta20to22_oee_withoutLCTFit'] =  0.64

    deltay12_deltay23_dict['eta20to22_oee_withLCTFit'] =  0.64

    deltay12_deltay23_dict['eta22to24_oee_withoutLCTFit'] =  0.64

    deltay12_deltay23_dict['eta22to24_oee_withLCTFit'] =  0.64



    deltay12_deltay23_dict['eta12to14_ooo_withoutLCTFit'] = 0.62

    deltay12_deltay23_dict['eta12to14_ooo_withLCTFit'] =  0.62

    deltay12_deltay23_dict['eta14to16_ooo_withoutLCTFit'] =  0.62

    deltay12_deltay23_dict['eta14to16_ooo_withLCTFit'] =  0.62

    deltay12_deltay23_dict['eta16to18_ooo_withoutLCTFit'] = 0.37

    deltay12_deltay23_dict['eta16to18_ooo_withLCTFit'] =  0.37

    deltay12_deltay23_dict['eta18to20_ooo_withoutLCTFit'] =  0.37

    deltay12_deltay23_dict['eta18to20_ooo_withLCTFit'] =  0.37

    deltay12_deltay23_dict['eta20to22_ooo_withoutLCTFit'] =  0.37

    deltay12_deltay23_dict['eta20to22_ooo_withLCTFit'] =  0.37

    deltay12_deltay23_dict['eta22to24_ooo_withoutLCTFit'] =  0.37

    deltay12_deltay23_dict['eta22to24_ooo_withLCTFit'] =  0.37



    deltay12_deltay23_dict['eta12to14_eee_withoutLCTFit'] =  0.925

    deltay12_deltay23_dict['eta12to14_eee_withLCTFit'] =  0.925

    deltay12_deltay23_dict['eta14to16_eee_withoutLCTFit'] =  0.925

    deltay12_deltay23_dict['eta14to16_eee_withLCTFit'] =  0.925

    deltay12_deltay23_dict['eta16to18_eee_withoutLCTFit'] = 0.6

    deltay12_deltay23_dict['eta16to18_eee_withLCTFit'] =  0.6

    deltay12_deltay23_dict['eta18to20_eee_withoutLCTFit'] =  0.6

    deltay12_deltay23_dict['eta18to20_eee_withLCTFit'] =  0.6

    deltay12_deltay23_dict['eta20to22_eee_withoutLCTFit'] = 0.6

    deltay12_deltay23_dict['eta20to22_eee_withLCTFit'] = 0.6

    deltay12_deltay23_dict['eta22to24_eee_withoutLCTFit'] = 0.6

    deltay12_deltay23_dict['eta22to24_eee_withLCTFit'] = 0.6



    deltay12_deltay23_dict['eta12to14_eoo_withoutLCTFit'] = 0.48

    deltay12_deltay23_dict['eta12to14_eoo_withLCTFit'] = 0.48

    deltay12_deltay23_dict['eta14to16_eoo_withoutLCTFit'] = 0.48

    deltay12_deltay23_dict['eta14to16_eoo_withLCTFit'] = 0.48

    deltay12_deltay23_dict['eta16to18_eoo_withoutLCTFit'] = 0.3

    deltay12_deltay23_dict['eta16to18_eoo_withLCTFit'] =  0.3

    deltay12_deltay23_dict['eta18to20_eoo_withoutLCTFit'] =  0.3

    deltay12_deltay23_dict['eta18to20_eoo_withLCTFit'] =  0.3

    deltay12_deltay23_dict['eta20to22_eoo_withoutLCTFit'] =  0.3

    deltay12_deltay23_dict['eta20to22_eoo_withLCTFit'] = 0.3

    deltay12_deltay23_dict['eta22to24_eoo_withoutLCTFit'] = 0.3

    deltay12_deltay23_dict['eta22to24_eoo_withLCTFit'] = 0.3




    ## find the LUT corresponding to this particular case
    if doFit:
        fitString = '_withLCTFit'
    else:
        fitString = '_withoutLCTFit'

    return deltay12_deltay23_dict["eta" + eta + '_' + parity + fitString]

#______________________________________________________________________________
def get_proptionality_factor_Tao(eta, parity, doFit):
  if eta in ['12to14','14to16']:
    if parity is 'ooo': return 0.635700 #1
    if parity is 'eoo': return 0.525    #3
    if parity is 'eee': return 1.001000 #2
    if parity is 'oee': return 1.279    #0
  if eta in ['16to18','18to20','20to22','22to24']:
    if parity is 'ooo': return 0.353000 #1
    if parity is 'eoo': return 0.310000 #3
    if parity is 'eee': return 0.555000 #2
    if parity is 'oee': return 0.64     #0


#______________________________________________________________________________
def pt_from_DDY123_Tao(DDY123, eta, parity, doFit):

  pt_range = [2.0, 3.0, 4.0, 5.0, 7., 10., 15., 20., 30., 40.]
  if eta is '12to14':
    if parity is 'ooo': DDY123_range = [20.328000, 21.324000, 15.827000, 7.965000, 3.957500, 2.458800, 1.513750, 1.184231, 0.920385, 0.772333]
    if parity is 'eoo': DDY123_range = [0.000000,  21.218000, 17.509000, 7.974000, 3.986000, 3.030000, 1.442000, 1.345000, 0.964000, 0.964000] ##last entry is the same as next to last!! 1.050000
    if parity is 'eee': DDY123_range = [39.496000, 36.456000, 29.482000, 16.108000, 8.219333, 4.896000, 2.985833, 2.211182, 1.532800, 1.280222]
    if parity is 'oee': DDY123_range = [0.000000,  28.185000, 27.864000, 12.517000, 6.794000, 4.280000, 2.725000, 2.007000, 1.404000, 1.227000]

  if eta is '14to16':
    if parity is 'ooo': DDY123_range = [18.444000, 16.404000, 9.447000, 5.219000, 3.092500, 1.986684, 1.316571, 1.002167, 0.795053, 0.678313]
    if parity is 'eoo': DDY123_range = [16.420000, 14.537000, 8.994000, 5.373000, 3.238000, 2.129500, 1.476000, 1.058000, 0.832000, 0.579000]
    if parity is 'eee': DDY123_range = [35.217000, 31.514000, 17.737000, 10.534000, 6.225500, 3.964500, 2.572125, 1.909250, 1.350200, 1.131909]
    if parity is 'oee': DDY123_range = [23.340000, 20.437000, 13.771000, 8.995000, 5.285000, 3.428333, 2.180000, 1.811000, 1.300000, 1.078000]

  if eta is '16to18':
    if parity is 'ooo': DDY123_range = [24.157000, 17.957000, 7.858333, 4.944000, 3.067000, 1.972000, 1.358000, 1.038333, 0.828000, 0.702500]
    if parity is 'eoo': DDY123_range = [25.953000, 18.818000, 7.909000, 5.117000, 3.109000, 1.977000, 1.275000, 1.072000, 0.857667, 0.752750]
    if parity is 'eee': DDY123_range = [34.693000, 28.912000, 14.246000, 8.881000, 5.232000, 3.286000, 2.016500, 1.585500, 1.215000, 1.041000]
    if parity is 'oee': DDY123_range = [35.200000, 29.289000, 13.686000, 8.835000, 4.743000, 3.417500, 2.072000, 1.631000, 1.290500, 1.101000]

  if eta is '18to20':
    if parity is 'ooo': DDY123_range = [19.976000, 11.661000, 5.336000, 3.572333, 2.197000, 1.473667, 0.979800, 0.831000, 0.717800, 0.654333]
    if parity is 'eoo': DDY123_range = [20.034000, 11.569000, 5.346000, 3.636000, 2.142500, 1.468778, 1.024833, 0.820273, 0.688400, 0.632500]
    if parity is 'eee': DDY123_range = [27.874000, 19.126000, 9.682000, 6.097000, 3.669667, 2.396400, 1.619571, 1.238333, 0.928667, 0.795000]
    if parity is 'oee': DDY123_range = [27.448000, 20.024500, 9.214000, 6.218000, 3.735333, 2.391250, 1.566143, 1.263200, 0.935667, 0.820429]

  if eta is '20to22':
    if parity is 'ooo': DDY123_range = [8.840000,5.327000,2.655500,1.896250,1.222333,0.846875,0.709000,0.598444,0.518000,0.497333]
    if parity is 'eoo': DDY123_range = [8.605000,5.023000,2.811000,1.932500,1.238000,0.898750,0.675000,0.587875,0.507545,0.495000]
    if parity is 'eee': DDY123_range = [15.19700,8.173000,4.679000,3.338000,2.041833,1.429000,0.970000,0.807167,0.678286,0.632000]
    if parity is 'oee': DDY123_range = [14.61300,7.994000,4.431000,3.335000,2.067667,1.396600,0.973667,0.849143,0.668111,0.627000]

  if eta is '22to24':
    if parity is 'ooo': DDY123_range = [3.603500,2.135000,1.365429,1.045000,0.752500,0.553600,0.457929,0.422818,0.393167,0.393167] ## last entry is equal to next to last!!
    if parity is 'eoo': DDY123_range = [3.194000,2.298000,1.386400,1.058000,0.763000,0.555909,0.445556,0.400545,0.372222,0.372222] ## last entry is equal to next to last!!
    if parity is 'eee': DDY123_range = [5.670000,3.932000,2.267000,1.745500,1.137000,0.849000,0.590286,0.512400,0.463333,0.449400]
    if parity is 'oee': DDY123_range = [6.031000,3.555000,2.411000,1.682000,1.190500,0.815000,0.621100,0.534000,0.496250,0.495000]

  #print "Pt range", pt_range
  #print "DDY123_range", DDY123_range
  #print "DDY123", DDY123

  if DDY123 < 0:
    print "ALARM", DDY123
  found_pt = 2
  #if   DDY123 >= DDY123_range[0] and DDY123_range[0] != 0:
  #  found_pt = 0
  if DDY123 < DDY123_range[0] and DDY123 >= DDY123_range[1]:
    found_pt = 2
  elif DDY123 < DDY123_range[1] and DDY123 >= DDY123_range[2]:
    found_pt = 3
  elif DDY123 < DDY123_range[2] and DDY123 >= DDY123_range[3]:
    found_pt = 4
  elif DDY123 < DDY123_range[3] and DDY123 >= DDY123_range[4]:
    found_pt = 5
  elif DDY123 < DDY123_range[4] and DDY123 >= DDY123_range[5]:
    found_pt = 7
  elif DDY123 < DDY123_range[5] and DDY123 >= DDY123_range[6]:
    found_pt = 10
  elif DDY123 < DDY123_range[6] and DDY123 >= DDY123_range[7]:
    found_pt = 15
  elif DDY123 < DDY123_range[7] and DDY123 >= DDY123_range[8]:
    found_pt = 20
  elif DDY123 < DDY123_range[8] and DDY123 >= DDY123_range[9]:
    found_pt = 30
  elif DDY123 < DDY123_range[9]:
    found_pt = 120 ## assign 140 GeV to highest pT muons by default!!!!
  else:
    found_pt = 2
  """
  ## in case the DDY123 is larger than the first value, assign it pt = 2 GeV
  elif DDY123 < DDY123_range[-1]:
    found_pt = 40
  else:
    for ii in range(1,len(DDY123_range)):
      if DDY123 > DDY123_range[ii]:
        found_pt = pt_range[ii-1]
        break
  #print "Found pt", found_pt
  """
  #print found_pt
  return found_pt

#______________________________________________________________________________
def pt_from_dPhi_GE21(DPhi, eta, parity):

  ## parity cases
  ## 0. odd even even
  ## 1. odd odd odd
  ## 2. even even even
  ## 3. even odd odd

  pt_range = [2.0, 3.0, 4.0, 5.0, 7., 10., 15., 20., 30., 40.]
  if eta is '12to14':
    if parity is 'oee': DPhi_range = [0.000000, 0.479900, 0.448070, 0.295200, 0.150740, 0.123340, 0.091260, 0.083980, 0.080160, 0.077500]
    if parity is 'ooo': DPhi_range = [0.428160, 0.553460,
                                      0.409480,
                                      0.260860,
                                      0.162850,
                                      0.123056,
                                      0.098670,
                                      0.093020,
                                      0.093080,
                                      0.091140]
    if parity is 'eee': DPhi_range = [0.405140,
                                      0.526660,
                                      0.437500,
                                      0.267670,
                                      0.162340,
                                      0.118900,
                                      0.090760,
                                      0.087080,
                                      0.087673,
                                      0.088280]
    if parity is 'eoo': DPhi_range = [0.000000,
                                      0.213980,
                                      0.359100,
                                      0.216380,
                                      0.128560,
                                      0.123140,
                                      0.109440,
                                      0.158620,
                                      0.060580,
                                      0.035120]

  if eta is '14to16':
    if parity is 'oee': DPhi_range = [0.532780,
                                      0.415120,
                                      0.271000,
                                      0.237780,
                                      0.164000,
                                      0.125380,
                                      0.088880,
                                      0.082840,
                                      0.093260,
                                      0.089680]
    if parity is 'ooo': DPhi_range = [0.544040,
                                      0.496380,
                                      0.348800,
                                      0.230900,
                                      0.151420,
                                      0.120467,
                                      0.095460,
                                      0.091833,
                                      0.094695,
                                      0.091255]
    if parity is 'eee': DPhi_range = [0.531780,
                                      0.509440,
                                      0.338870,
                                      0.226220,
                                      0.160200,
                                      0.120060,
                                      0.101780,
                                      0.093290,
                                      0.091740,
                                      0.090350]
    if parity is 'eoo': DPhi_range = [0.424840,
                                      0.395900,
                                      0.306500,
                                      0.219840,
                                      0.157500,
                                      0.128060,
                                      0.104160,
                                      0.072620,
                                      0.078500,
                                      0.093520]

  if eta is '16to18':
    if parity is 'oee': DPhi_range = [0.529040,
                                      0.475500,
                                      0.235420,
                                      0.162560,
                                      0.105260,
                                      0.079680,
                                      0.065440,
                                      0.061420,
                                      0.063960,
                                      0.058960]

    if parity is 'ooo': DPhi_range = [0.535000,
                                      0.472900,
                                      0.217160,
                                      0.145120,
                                      0.085973,
                                      0.060900,
                                      0.041930,
                                      0.035773,
                                      0.029827,
                                      0.027020]
    if parity is 'eee': DPhi_range = [0.485420,
                                      0.435300,
                                      0.226580,
                                      0.164780,
                                      0.107020,
                                      0.076700,
                                      0.064600,
                                      0.058750,
                                      0.059580,
                                      0.057300]
    if parity is 'eoo': DPhi_range = [0.515740,
                                      0.462140,
                                      0.210820,
                                      0.149220,
                                      0.085680,
                                      0.056373,
                                      0.045200,
                                      0.039680,
                                      0.036830,
                                      0.039740]

  if eta is '18to20':
    if parity is 'oee': DPhi_range = [0.430960,
                                      0.354890,
                                      0.179560,
                                      0.119847,
                                      0.086280,
                                      0.067560,
                                      0.054710,
                                      0.050720,
                                      0.052300,
                                      0.050613]
    if parity is 'ooo': DPhi_range = [0.451560,
                                      0.340600,
                                      0.174860,
                                      0.113700,
                                      0.072760,
                                      0.051200,
                                      0.038830,
                                      0.035883,
                                      0.030160,
                                      0.030160]
    if parity is 'eee': DPhi_range = [0.437460,
                                      0.324620,
                                      0.171980,
                                      0.108540,
                                      0.079680,
                                      0.065740,
                                      0.057560,
                                      0.057427,
                                      0.053260,
                                      0.057700]
    if parity is 'eoo': DPhi_range = [0.410720,
                                      0.324380,
                                      0.152780,
                                      0.114020,
                                      0.069780,
                                      0.051320,
                                      0.042787,
                                      0.040627,
                                      0.040880,
                                      0.039740]

  if eta is '20to22':
    if parity is 'oee': DPhi_range = [0.344860,
                                      0.209760,
                                      0.113700,
                                      0.106650,
                                      0.076220,
                                      0.061433,
                                      0.055220,
                                      0.056900,
                                      0.056940,
                                      0.057360]

    if parity is 'ooo': DPhi_range = [0.308380,
                                      0.214270,
                                      0.111480,
                                      0.086350,
                                      0.055780,
                                      0.044500,
                                      0.039690,
                                      0.036030,
                                      0.031624,
                                      0.031720]

    if parity is 'eee': DPhi_range = [0.324680,
                                      0.232940,
                                      0.124380,
                                      0.101380,
                                      0.078520,
                                      0.064773,
                                      0.063380,
                                      0.068680,
                                      0.060340,
                                      0.066100]

    if parity is 'eoo': DPhi_range = [0.276480,
                                      0.187680,
                                      0.114080,
                                      0.081240,
                                      0.064930,
                                      0.055440,
                                      0.043670,
                                      0.042980,
                                      0.043550,
                                      0.044590]
  if eta is '22to24':
    return 0

  if DPhi < 0:
    print "ALARM", DPhi
  found_pt = 2
  if   DPhi < DPhi_range[0] and DPhi >= DPhi_range[1]:
    found_pt = 2
  elif DPhi < DPhi_range[1] and DPhi >= DPhi_range[2]:
    found_pt = 3
  elif DPhi < DPhi_range[2] and DPhi >= DPhi_range[3]:
    found_pt = 4
  elif DPhi < DPhi_range[3] and DPhi >= DPhi_range[4]:
    found_pt = 5
  elif DPhi < DPhi_range[4] and DPhi >= DPhi_range[5]:
    found_pt = 7
  elif DPhi < DPhi_range[5] and DPhi >= DPhi_range[6]:
    found_pt = 10
  elif DPhi < DPhi_range[6] and DPhi >= DPhi_range[7]:
    found_pt = 15
  elif DPhi < DPhi_range[7] and DPhi >= DPhi_range[8]:
    found_pt = 20
  elif DPhi < DPhi_range[8] and DPhi >= DPhi_range[9]:
    found_pt = 30
  elif DPhi < DPhi_range[9]:
    found_pt = 120 ## assign 120 GeV to highest pT muons by default!!!!
  else:
    found_pt = 2

  #print found_pt
  return found_pt

#______________________________________________________________________________
def pt_from_position(x1, y1, z1, phi1, isEven1,
                     x2, y2, z2, phi2, isEven2,
                     x3, y3, z3, phi3, isEven3,
                     x4, y4, z4, phi4, isEven4,
                     eta):

  etaPartition = get_eta_partition(eta)
  totalParity = get_parity(isEven1, isEven2, isEven3, isEven4)
  deltay12, deltay23 = deltay12_deltay23(x1, y1, phi1,
                                         x2, y2, phi2,
                                         x3, y3, phi3)
  ## debug
  debug = False
  if debug:
    print "etaPartition", etaPartition
    print "totalParity", totalParity
    print "deltay12", deltay12, "deltay23", deltay23


  if totalParity < 0 or totalParity > 3 or etaPartition == -1: return -99

  preResult1 = 1./abs(deltay23 - dict_prop_slope_intercept[totalParity][etaPartition][0] * deltay12)
  preResult2 = dict_prop_slope_intercept[totalParity][etaPartition][1]
  preResult3 = dict_prop_slope_intercept[totalParity][etaPartition][2]

  result = (preResult1 + preResult2) / preResult3
  return result


#______________________________________________________________________________
def poly_library(st1, st2, pol):
  if pol == 'pol1':
    if st1==1 and st2==2: return [5.746, 1.787, 0, 0]
    if st1==1 and st2==3: return [-2.232, 1.316, 0, 0]
    if st1==1 and st2==4: return [2.902, 1.06, 0, 0]
    if st1==2 and st2==3: return [5.673, 1.509, 0, 0]
    if st1==2 and st2==4: return [-1.954, 1.387, 0, 0]
    if st1==3 and st2==4: return [9.49, 1.701, 0, 0]

  if pol == 'pol2':
    if st1==1 and st2==2: return [-5.242, 3.51, -0.05, 0]
    if st1==1 and st2==3: return [-4.949, 1.803, -0.01521, 0]
    if st1==1 and st2==4: return [-3.815, 1.25, -0.0059, 0]
    if st1==2 and st2==3: return [-5.676, 3.146, -0.04168, 0]
    if st1==2 and st2==4: return [-6.098, 2.019, -0.01753, 0]
    if st1==3 and st2==4: return [-5.73,  4.098, -0.06534, 0]

  if pol == 'pol3':
    if st1==1 and st2==2: return [-9.07, 4.337, -0.09737, 0.0007264]
    if st1==1 and st2==3: return [-3.847, 1.544, 0.0003261, -0.0002424]
    if st1==1 and st2==4: return [2.217, 0.8523, 0.01741, -0.0003688]
    if st1==2 and st2==3: return [-8.221, 3.66, -0.06812, 0.0003513]
    if st1==2 and st2==4: return [-7.146, 2.234, -0.02903, 0.0001623]
    if st1==3 and st2==4: return [-12.02, 4.979, -0.1118, 0.0006741]


#______________________________________________________________________________
def poly_resolution_library(st1, st2, pol):
  if pol == 'pol1':
    if st1==1 and st2==2: return [ 0.232997504786 ,  0.017828278707 ,  0 ,  0 ]
    if st1==1 and st2==3: return [ 0.104940544565 ,  0.0106112367459 ,  0 ,  0 ]
    if st1==1 and st2==4: return [ 0.0925582264163 ,  0.00956934260453 ,  0 ,  0 ]
    if st1==2 and st2==3: return [ 0.216945979301 ,  0.016118034413 ,  0 ,  0 ]
    if st1==2 and st2==4: return [ 0.163140326149 ,  0.0135758108182 ,  0 ,  0 ]
    if st1==3 and st2==4: return [ 0.330823642594 ,  0.0231212343975 ,  0 ,  0 ]

  if pol == 'pol2':
    if st1==1 and st2==2: return [ 0.425399442245 ,  0.0586066270926 ,  0.00163445427321 ,  0 ]
    if st1==1 and st2==3: return [ 0.192621978027 ,  0.0308062180816 ,  0.000904397271426 ,  0 ]
    if st1==1 and st2==4: return [ 0.178716461728 ,  0.0277746891351 ,  0.000852731696197 ,  0 ]
    if st1==2 and st2==3: return [ 0.366360930694 ,  0.0455322268289 ,  0.00108424619265 ,  0 ]
    if st1==2 and st2==4: return [ 0.296314120328 ,  0.0400845995546 ,  0.00104606620245 ,  0 ]
    if st1==3 and st2==4: return [ 0.610542572048 ,  0.0758914148344 ,  0.00197003210269 ,  0 ]

  if pol == 'pol3':
    if st1==1 and st2==2: return [ 0.761866989134 ,  0.148505001684 ,  0.00791521266201 ,  0.000119935087897 ]
    if st1==1 and st2==3: return [ 0.349128668505 ,  0.0750168990651 ,  0.00420312018117 ,  6.40341791597e-05 ]
    if st1==1 and st2==4: return [ 0.329886125573 ,  0.0688219584793 ,  0.00399634981601 ,  6.39899740996e-05 ]
    if st1==2 and st2==3: return [ 0.695634434177 ,  0.127903932904 ,  0.00623745201508 ,  8.16246655536e-05 ]
    if st1==2 and st2==4: return [ 0.553850340289 ,  0.103963455628 ,  0.00524106684519 ,  7.24391536905e-05 ]
    if st1==3 and st2==4: return [ 1.10865695068 ,  0.196820380084 ,  0.00978414190039 ,  0.000138975821929 ]


#______________________________________________________________________________
def getPtFromDphi(st1, st2, dphi1, dphi2, pol):
  if dphi1 != 99 and dphi2 != 99 and dphi1 != dphi2:
    values = poly_library(st1, st2, pol)
    abs_deltaPhi_inv = 1./abs(deltaPhi(dphi1, dphi2))
    values_corr = [values[3], values[2], values[1], values[0] - abs_deltaPhi_inv]

    roots = np.roots(values_corr)
    #print roots
    #p0_term = values[0]
    #p1_term = abs_deltaPhi_inv*values[1]
    #p2_term = abs_deltaPhi_inv*abs_deltaPhi_inv*values[2]
    #p3_term = abs_deltaPhi_inv*abs_deltaPhi_inv*abs_deltaPhi_inv*values[3]
    return 0#p0_term + p1_term + p2_term + p3_term
  else:
    return 0


#______________________________________________________________________________
def getPtErrorFromDphi(st1, st2, dphi1, dphi2, pol):
  if dphi1 != 99 and dphi2 != 99 and dphi1 != dphi2:
    values = poly_library(st1, st2, pol)
    abs_deltaPhi_inv = 1./abs(deltaPhi(dphi1, dphi2))

    p0_term = values[0]
    p1_term = abs_deltaPhi_inv*values[1]
    p2_term = abs_deltaPhi_inv*abs_deltaPhi_inv*values[2]
    p3_term = abs_deltaPhi_inv*abs_deltaPhi_inv*abs_deltaPhi_inv*values[3]
    return p0_term + p1_term + p2_term + p3_term
  else:
    return 0


#______________________________________________________________________________
def L1Mu_status(st1, st2, st3, st4):
  def ok(st):
    return st != 99
  def nok(st):
    return st==99

  ## should not happen!
  if nok(st1) and nok(st2) and nok(st3) and nok(st4): status = 0

  if ok(st1) and nok(st2) and nok(st3) and nok(st4):  status = 1
  if nok(st1) and ok(st2) and nok(st3) and nok(st4):  status = 2
  if nok(st1) and nok(st2) and ok(st3) and nok(st4):  status = 3
  if nok(st1) and nok(st2) and nok(st3) and ok(st4):  status = 4

  ## low quality
  if ok(st1) and ok(st2) and nok(st3) and nok(st4):  status = 5
  if ok(st1) and nok(st2) and ok(st3) and nok(st4):  status = 6
  if ok(st1) and nok(st2) and nok(st3) and ok(st4):  status = 7
  if nok(st1) and ok(st2) and ok(st3) and nok(st4):  status = 8
  if nok(st1) and ok(st2) and nok(st3) and ok(st4):  status = 9
  if nok(st1) and nok(st2) and ok(st3) and ok(st4):  status = 10

  ## high quality
  if nok(st1) and ok(st2) and ok(st3) and ok(st4):  status = 11
  if ok(st1) and nok(st2) and ok(st3) and ok(st4):  status = 12
  if ok(st1) and ok(st2) and nok(st3) and ok(st4):  status = 13
  if ok(st1) and ok(st2) and ok(st3) and nok(st4):  status = 14

  ## highest quality
  if ok(st1) and ok(st2) and ok(st3) and ok(st4):  status = 15

  return status

#______________________________________________________________________________
def deltaPhi(phi1, phi2):
  result = phi1 - phi2;
  while (result > 2*M_PI):
    result -= 4*M_PI;
  while (result <= -2*M_PI):
    result += 4*M_PI;
  return result;


#______________________________________________________________________________
def deltaPhi2(phi1, phi2):
  result = phi1 - phi2;
  while (result > M_PI):
    result -= 2*M_PI;
  while (result <= -M_PI):
    result += 2*M_PI;
  return result;

#______________________________________________________________________________
def normalizedPhi(phi1):
  result = phi1;
  while (result > 2*M_PI):
    result -= 4*M_PI;
  while (result <= -2*M_PI):
    result += 4*M_PI;
  return result;

#______________________________________________________________________________
def normalizedPhi2(phi1):
  result = phi1;
  while (result > M_PI):
    result -= 2*M_PI;
  while (result <= -M_PI):
    result += 2*M_PI;
  return result;

#______________________________________________________________________________
def getQuantilesX(hist2d):
  probs = array.array('d', [0.025, 0.16, 0.5, 1 - 0.16, 0.975] )
  q = array.array('d', [0.0]*len(probs))
  hist1d = hist2d.QuantilesX(len(probs), q, probs)
  SetOwnership( hist1d, True )
  return hist1d


#______________________________________________________________________________
def getMedian(yintegral):
  if (yintegral%2 == 1):
    return (yintegral-1)/2 + 1
  else:
    return (yintegral/2) + 0.5


#______________________________________________________________________________
def get1DHistogramMedianY(hist2d):
    '''this function returns a 1d histogram
    for a 2d histgram using the median and the x-sigma resolution on the median'''

    xBins = hist2d.GetXaxis().GetNbins()
    yBins = hist2d.GetYaxis().GetNbins()
    xmin = hist2d.GetXaxis().GetXmin()
    xmax = hist2d.GetXaxis().GetXmax()
    #ymin = hist2d.GetYaxis().GetXmin()
    #ymax = hist2d.GetYaxis().GetXmax()

    xs = []
    ys = []
    xs_e_up = []
    xs_e_dw = []
    ys_e_up = []
    ys_e_dw = []

    r1 = TH1F("r1","",xBins,xmin,xmax)
    for x in range(1,xBins+1):
      #print "bin:", x
      probSum = array.array('d', [.32, .5, .68])
      q = array.array('d', [0.0]*len(probSum))
      entries = hist2d.Integral(x,x,0,yBins+1)
      ## do not compute quantiles for empty histograms!!!
      if entries == 0:
        continue
      tempHist = hist2d.ProjectionY("bin1",x,x)
      tempHist.GetQuantiles(len(probSum), q, probSum)
      #print "q", q

      n = tempHist.GetEffectiveEntries()
      f = TMath.Gaus(q[1], tempHist.GetMean(), tempHist.GetStdDev(), True)
      error = 0
      if (f>0 and n>1):
        error = TMath.Sqrt(0.5 * 0.5 / ( n * f * f ) )

      xval = hist2d.GetBinCenter(x)
      #xval_e_up = hist2d.GetBinWidth(x)/2.
      #xval_e_dw = hist2d.GetBinWidth(x)/2.

      yval = q[1]
      if n<=1:
        yval=0
      r1.SetBinContent(x, yval)
      r1.SetBinError(x, error)

      """
      xs.append(xval)
      xs_e_up.append(xval_e_up)
      xs_e_dw.append(xval_e_dw)
      ys.append(yval)
      ys_e_up.append(yval_e_up)
      ys_e_dw.append(yval_e_dw)
      """

    """
    print "xval", xs
    print
    print "yval", ys
    print
    print "yval_e_up", ys_e_up
    print
    print "yval_e_dw", ys_e_dw
    """
    SetOwnership( r1, False )
    return r1
    """
    tgraph = TGraphAsymmErrors(len(xs),
                               array.array("f",xs),
                               array.array("f",ys),
                               array.array("f",xs_e_dw),
                               array.array("f",xs_e_up),
                               array.array("f",ys_e_dw),
                               array.array("f",ys_e_up))
    SetOwnership( tgraph, False )
    return tgraph
    """

#______________________________________________________________________________
def get1DHistogramFractionY(hist2d, fraction=.9):
    '''this function returns 2 arrays, the x-values and the array with the
    with the 90% fraction on the yaxis'''

    xBins = hist2d.GetXaxis().GetNbins()
    yBins = hist2d.GetYaxis().GetNbins()
    xmin = hist2d.GetXaxis().GetXmin()
    xmax = hist2d.GetXaxis().GetXmax()
    ymin = hist2d.GetYaxis().GetXmin()
    ymax = hist2d.GetYaxis().GetXmax()

    xs = []
    ys = []
    xs_e_up = []
    xs_e_dw = []
    ys_e_up = []
    ys_e_dw = []

    r1 = TH1F("r1","",hist2d.GetXaxis().GetNbins(), hist2d.GetXaxis().GetXbins().GetArray())
    for x in range(1,xBins+1):
      #print "bin:", x
      probSum = array.array('d', [.90])
      q = array.array('d', [0.0]*len(probSum))
      entries = hist2d.Integral(x,x,0,yBins+1)
      ## do not compute quantiles for empty histograms!!!
      if entries == 0:
        continue
      #print "check", xBins, x, hist2d.GetBinLowEdge(x)
      tempHist = hist2d.ProjectionY("bin1",x,x)
      tempHist.GetQuantiles(len(probSum), q, probSum)
      #print "q", q
      n = tempHist.Integral(0,tempHist.GetYaxis().GetNbins()+1)#GetEffectiveEntries()
      f = TMath.Gaus(q[0], tempHist.GetMean(), tempHist.GetStdDev(), True)
      error = 0
      if (f>0 and n>1):
        error = TMath.Sqrt(fraction * (1-fraction) / ( n * f * f ) )

      xval = hist2d.GetBinLowEdge(x)
      xval_e_up = hist2d.GetBinWidth(x)/2.
      xval_e_dw = hist2d.GetBinWidth(x)/2.

      yval = q[0]
      yval_e_up = error #yval/sqrt(entries*fraction)
      yval_e_dw = error #yval/sqrt(entries*(1-fraction))

      r1.SetBinContent(x, yval)
      r1.SetBinError(x, max(yval_e_up, yval_e_dw))

      xs.append(xval)
      xs_e_up.append(xval_e_up)
      xs_e_dw.append(xval_e_dw)
      ys.append(yval)
      ys_e_up.append(yval_e_up)
      ys_e_dw.append(yval_e_dw)

      #g1 = TF1("g1","[0]/(x-[1])",3, 40)
      #r1.Fit(g1,"LRQM")


    SetOwnership( r1, False )
    return xs, ys, r1


#______________________________________________________________________________
def FitHistoFunction(hist2d, fraction, printa=False):

    xBins = hist2d.GetXaxis().GetNbins()
    yBins = hist2d.GetYaxis().GetNbins()
    xmin = hist2d.GetXaxis().GetXmin()
    xmax = hist2d.GetXaxis().GetXmax()
    ymin = hist2d.GetYaxis().GetXmin()
    ymax = hist2d.GetYaxis().GetXmax()

    fraction = fraction/100.0
    Xs = array.array('d')
    Ys = array.array('d')
    exl = array.array('d')
    eyl = array.array('d')
    exh = array.array('d')
    eyh = array.array('d')
    ybinwidth = (ymax-ymin)/(1.0*yBins)
    xbinwidth = (xmax-xmin)/(1.0*yBins)
    Totfreq = hist2d.Integral(0,xBins+1,0,yBins+1)
    if Totfreq < 10:
      return (0,0,0,0,0,0)
    print "Totfreq ",Totfreq
    for x in range(1, xBins+1):

        if (printa > 0):
            print "*********** For bin x: %d **********************"%x


        # Find the total number of frequencies
        totalfreq = hist2d.Integral(x,x,0,yBins+1)
        if totalfreq*1.0/(Totfreq*1.0)<0.0001:
          if printa>0:print "bin ",x," two small bincontent here "
          continue
        # calculate the expected integral
        med = totalfreq*(1.0-fraction)

        temporal = 0
        midbin = 0
        content =0
        for m in range (0,yBins+1):
                temporal = hist2d.Integral(x,x,0,m)
                if (temporal >= med):
                    midbin = m              # Break once I get to the median
                    if printa>0:print "total inegral at this bin ",totalfreq, " expected integral ", med," temporal ",temporal, " temporal bin ",midbin
                    break
                if midbin ==0: #median is out of y-range
                  if printa>0:print "median is out of y-range"
                  continue

        content = hist2d.GetBinContent(x,midbin)
        p=temporal*1.0/(totalfreq*1.0)
        ledge = ymin+(midbin-1)*ybinwidth
        p1 = (temporal-content)*1.0/(totalfreq*1.0)
        if printa>0:print "temporal ",temporal," temporal/totalfreq ",p," (temporal-thisbincontent)/totalfreq ",p1," total ",totalfreq," thisbin content ",content," this bin ",midbin
        y = ledge+ybinwidth*(1-fraction-p1)/(p-p1)

        Xs.append(hist2d.GetBinCenter(x))
        Ys.append(y)
        exl.append(xbinwidth/2.0)
        exh.append(xbinwidth/2.0)
        eyl.append(y*1.0/math.sqrt(totalfreq*(1-fraction)))
        eyh.append(y*1.0/math.sqrt(totalfreq*(fraction)))
        if printa>0:print "x ",hist2d.GetBinCenter(x)," y ",y," exl ",xbinwidth/2.," exh ",xbinwidth/2," eyl ",math.sqrt(totalfreq*(1-fraction))," eyh ",math.sqrt(totalfreq*(fraction))

    return (Xs, Ys, exl, exh, eyl, eyh)                               #Return the histogram 1D
                             #Return the histogram 1D


#_______________________________________________________________________________
def applyTdrStyle():
    cmsText     = "CMS Phase II Simulation"
    cmsTextFont   = 61  ## default is helvetic-bold

    lumiTextSize     = 0.6
    lumiTextOffset   = 0.2
    cmsTextSize      = 0.75
    cmsTextOffset    = 0.1  ## only used in outOfFrame version

    relPosX    = 0.045
    relPosY    = 0.035
    relExtraDY = 1.2

    ## ratio of "CMS" and extra text size
    extraOverCmsTextSize  = 0.76

    lumi_14TeV = "PU = 0"

    """
    H = pad.GetWh();
    W = pad.GetWw();
    l = pad.GetLeftMargin();
    b = pad.GetBottomMargin();
    e = 0.025;
    """
    t = gPad.GetTopMargin();
    r = gPad.GetRightMargin();


    latex = TLatex()
    latex.SetNDC();
    latex.SetTextAngle(0);
    latex.SetTextColor(kBlack);

    extraTextSize = extraOverCmsTextSize*cmsTextSize;
    """
    latex.SetTextFont(cmsTextFont);
    latex.SetTextSize(cmsTextSize*t);
    latex.SetTextFont(42);
    latex.SetTextAlign(31);
    latex.SetTextSize(lumiTextSize*t);
    latex.DrawLatex(1-r,1-t+lumiTextOffset*t,lumiText);
    """

    """
    alignY_=3;
    alignX_=2;
    align_ = 10*alignX_ + alignY_;
    latex.SetTextAlign(align_);
    posX_ = 1-r - relPosX*(1-l-r)
    posY_ = 1-t - relPosY*(1-t-b)
    """
    latex.DrawLatex(0.52, 0.87, cmsText);
    return latex


#______________________________________________________________________________
def addfiles(ch, dirname=".", ext=".root"):
  theInputFiles = []
  if not os.path.isdir(dirname):
    print "ERROR: This is not a valid directory: ", dirname
    exit()
  ls = os.listdir(dirname)
  theInputFiles.extend([dirname[:] + x for x in ls if x.endswith(ext)])
  for pfile in theInputFiles:
    #print pfile
    ch.Add(pfile)

  return ch

#______________________________________________________________________________
def firstSecondBin(h):
    h.SetBinContent(1,h.GetBinContent(0) + h.GetBinContent(1))
    h.SetBinContent(0,0)
    return h
#______________________________________________________________________________
def getBackwardCumulative(h):
    htemp = TH1F("htemp"," ",len(myptbin)-1, myptbin)
    ## keep the underflow
    htemp.SetBinContent(0,h.GetBinContent(0))
    for i in range(1,len(myptbin)+1):
        sum = 0
        for j in range(i+1,len(myptbin)+1):
            sum += h.GetBinContent(j)
        htemp.SetBinContent(i, sum)
    htemp.Sumw2()
    SetOwnership(htemp, False)
    return htemp

#______________________________________________________________________________
def getRatecount(tree, todraw, cut):
    htemp = TH1F("htemp"," ",len(myptbin)-1, myptbin)
    tree.Draw(todraw+">>htemp",cut)
    return htemp.GetEntries()

#___________________________________________________
def getTotalEventNumber(tree):
    eventList = []
    for k in range(0,tree.GetEntries()):
        tree.GetEntry(k)
        eventList.append(tree.event)
    return len(set(eventList))

#______________________________________________________________________________
def scaleToRate(nEvents, h):
    ntotalEvents = nEvents #tree.GetEntries()
    averageRate = 30000. #40000. * 0.795 #[kHz]
    bunchCrossingWindow = 1.#3.
    h.Scale(averageRate/bunchCrossingWindow/ntotalEvents)
    return h

#______________________________________________________________________________
def getRatePtHistogram(nEvents, h):
    h = getBackwardCumulative(h)
    h = scaleToRate(nEvents, h)
    return h

#______________________________________________________________________________
def getRateEtaHistogram(nEvents, h):
    h.Sumw2()
    h = scaleToRate(nEvents, h)
    return h

#______________________________________________________________________________
def getRate(treecut):

    #f = ROOT.TFile(file)
    #t = f.Get(dir)
    h = TH1F("h"," ",len(myptbin)-1, myptbin)
    n=1
    for x in ptbin:
       #print "cut ",cut+" && pt>=%f"%x
       content = getRatecount(tree,"pt",cut+"&& pt>=%f"%x)
       #content = tree.GetEntries(cut+"&& pt>=%f"%x)
       print "bin n ",n,"pt ",x ,"  content ",content
       h.SetBinContent(n, content)
       n= n+1
    h.Sumw2()
    #print "before scale "
    #h.Print("all")
    ntotalEvents = getTotalEventNumber(tree)
    averageRate = 30000. #[kHz]
    bunchCrossingWindow = 1.
#    h.Scale(40000./ntotalEvents/3.*0.795)
    h.Scale(averageRate/bunchCrossingWindow/ntotalEvents)
    SetOwnership(h, False)
    return h

#______________________________________________________________________________
def set_style():
   gStyle.SetStatStyle(0)
   gStyle.SetOptStat(11111111)
   gStyle.SetTitleBorderSize(0);
   gStyle.SetPadLeftMargin(0.126);
   gStyle.SetPadRightMargin(0.04);
   gStyle.SetPadTopMargin(0.06);
   gStyle.SetPadBottomMargin(0.13);

#______________________________________________________________________________
def draw_1D(p, to_draw, c_title, title, h_bins, cut="", opt = ""):
   gStyle.SetStatStyle(0)
   gStyle.SetOptStat(11111111)

   c = TCanvas("c","c",800,600)
   c.Clear()
   gStyle.SetTitleBorderSize(0);
   gStyle.SetPadLeftMargin(0.126);
   gStyle.SetPadRightMargin(0.04);
   gStyle.SetPadTopMargin(0.06);
   gStyle.SetPadBottomMargin(0.13);
   p.Draw(to_draw + ">>" + "h_name" + h_bins, cut)
   h = TH1F(gDirectory.Get("h_name").Clone("h_name"))
   if not h:
      sys.exit('h does not exist')
   h.SetTitle(title)
   h.SetLineWidth(2)
   h.SetLineColor(kBlue)
   h.GetXaxis().SetLabelSize(0.05)
   h.GetYaxis().SetLabelSize(0.05)
   h.GetXaxis().SetTitleSize(0.06)
   h.GetYaxis().SetTitleSize(0.06)
   header = "                                                         PU = 140, 14 TeV"
#   h.SetTitle(header)
   h.Draw()
   h.SetMinimum(0.)
   h.SetMaximum(h.GetMaximum()*1.2)
   c.SaveAs("" + c_title + ".png")


#______________________________________________________________________________
def draw_1D_root(p, to_draw, c_title, title, h_bins, cut="", opt = ""):
   p.Draw(to_draw + ">>" + "h_name" + h_bins, cut)
   h = TH1F(gDirectory.Get("h_name").Clone("h_name"))
   if not h:
      sys.exit('h does not exist')
   h.SetTitle(title)
   h.SetLineWidth(2)
   h.SetLineColor(kBlue)
   h.GetXaxis().SetLabelSize(0.05)
   h.GetYaxis().SetLabelSize(0.05)
   h.GetXaxis().SetTitleSize(0.06)
   h.GetYaxis().SetTitleSize(0.06)
   h.Draw()
   h.SetMinimum(0.)
   h.SetMaximum(h.GetMaximum()*1.2)
   h.SaveAs("" + c_title + ".root")


#_______________________________________________________________________________
def draw_2D(p, to_draw, c_title, title, h_bins, cut="", opt = ""):
  gStyle.SetStatStyle(0)
  gStyle.SetOptStat(1110)
  c = TCanvas("c","c",800,600)
  c.Clear()
  gStyle.SetPadLeftMargin(0.126);
  gStyle.SetPadRightMargin(0.04);
  gStyle.SetPadTopMargin(0.06);
  gStyle.SetPadBottomMargin(0.13);
  p.Draw(to_draw + ">>h_" + h_bins, cut)
  h = TH2F(gDirectory.Get("h_"))
  if not h:
    sys.exit('h does not exist')
  h = TH2F(h.Clone("h_"))
  h.SetTitle(title)
  h.SetLineWidth(2)
  h.SetLineColor(kBlue)
  h.Draw(opt)
  c.SaveAs("" + c_title + ".png")


#_______________________________________________________________________________
def applyTdrStyle():
    cmsText     = "CMS PhaseII Simulation"
    cmsTextFont   = 61  ## default is helvetic-bold

    lumiTextSize     = 0.6
    lumiTextOffset   = 0.2
    cmsTextSize      = 0.75
    cmsTextOffset    = 0.1  ## only used in outOfFrame version

    relPosX    = 0.045
    relPosY    = 0.035
    relExtraDY = 1.2

    ## ratio of "CMS" and extra text size
    extraOverCmsTextSize  = 0.76

    lumi_14TeV = "PU = 140"

    """
    H = pad.GetWh();
    W = pad.GetWw();
    l = pad.GetLeftMargin();
    b = pad.GetBottomMargin();
    e = 0.025;
    """
    t = gPad.GetTopMargin();
    r = gPad.GetRightMargin();
    latex = TLatex()
    latex.SetNDC();
    latex.SetTextAngle(0);
    latex.SetTextColor(kBlack);

    extraTextSize = extraOverCmsTextSize*cmsTextSize;
    """
    latex.SetTextFont(cmsTextFont);
    latex.SetTextSize(cmsTextSize*t);
    latex.SetTextFont(42);
    latex.SetTextAlign(31);
    latex.SetTextSize(lumiTextSize*t);
    latex.DrawLatex(1-r,1-t+lumiTextOffset*t,lumiText);
    """

    """
    alignY_=3;
    alignX_=2;
    align_ = 10*alignX_ + alignY_;
    latex.SetTextAlign(align_);
    posX_ = 1-r - relPosX*(1-l-r)
    posY_ = 1-t - relPosY*(1-t-b)
    """
    latex.DrawLatex(0.52, 0.87, cmsText);
    return latex


#_______________________________________________________________________________
def getEffObject(p, variable, binning, denom_cut, extra_num_cut):

    denom = get_1D(p, "denom", "denom", binning, variable, denom_cut)
    num = get_1D(p, "num", "num", binning, variable, AND(denom_cut, extra_num_cut))
    print "denom", denom.GetEntries()
    print "num", num.GetEntries()
    h = TEfficiency(num, denom)
#    h = clearEmptyBinsEff(h)
    SetOwnership(h, False)
    return h

#_______________________________________________________________________________
def makeEtaEffPlot(h, plotTitle, legTitle):
    c = TCanvas("c","c",800,600)
    c.Clear()
    gStyle.SetTitleStyle(0);
    gStyle.SetTitleAlign(13); ##coord in top left
    gStyle.SetTitleX(0.);
    gStyle.SetTitleY(1.);
    gStyle.SetTitleW(1);
    gStyle.SetTitleH(0.058);
    #gStyle.SetTitleXOffset(0.05)
    gStyle.SetTitleBorderSize(0);
    gStyle.SetPadLeftMargin(0.126);
    gStyle.SetPadRightMargin(0.04);
    gStyle.SetPadTopMargin(0.06);
    gStyle.SetPadBottomMargin(0.13);
    gStyle.SetOptStat(0);
    gStyle.SetMarkerStyle(1);
    gPad.SetTickx(1)
    gPad.SetTicky(1)
    #gStyle.SetStatStyle(0)
    base = TH1D("base","base", 25, 0, 2.5)
    base.SetStats(0)
    base.SetTitle("                                                                      14 TeV,  PU = 140; #eta; Efficiency")
    base.SetMinimum(0)
    base.SetMaximum(1.1)
    base.GetXaxis().SetLabelSize(0.05)
    base.GetYaxis().SetLabelSize(0.05)
    base.GetXaxis().SetTitleSize(0.06)
    base.GetYaxis().SetTitleSize(0.06)
    #base.GetXaxis().SetLimits(0,maxbin)
    base.Draw()
    h.SetMarkerColor(kBlue)
    h.SetLineColor(kBlue)
    h.SetLineWidth(2)
    h.SetMarkerStyle(1)
    h.SetMarkerSize(15)
    h.Draw("same")
    leg = TLegend(0.1,0.3,0.75,0.45,"","brNDC")
    leg.SetFillColor(kWhite)
    leg.SetBorderSize(0)
    leg.SetFillStyle(0)
    leg.SetTextSize(0.04)
    leg.AddEntry(h,legTitle,"l")
    leg.Draw("same")
    #tex = drawLabel(p.ctau + ", " + p.mass,0.45,0.55,0.05)
    #tex4 = drawLabel(p.mass,0.55,0.47,0.05)
    #tex3 = drawLabel("H #rightarrow 2n_{1} #rightarrow 2n_{D}2Z_{D} #rightarrow 2n_{D}4#mu",0.45,0.65,0.05)
    tex2 = applyTdrStyle()
    c.SaveAs(plotTitle + ".png")

#_______________________________________________________________________________
def drawLabel(title, x=0.17, y=0.35, font_size=0.05):
    tex = TLatex(x, y,"#font[41]{%s}"%(title))
    tex.SetTextSize(font_size)
    tex.SetNDC()
    tex.Draw("same")
    return tex

#_______________________________________________________________________________
def makeSimplePlot(targetDir, h, plotTitle, setLogx=False):
    c = TCanvas("c","c",800,600)
    c.Clear()
    gStyle.SetTitleStyle(0);
    gStyle.SetTitleAlign(13); ##coord in top left
    gStyle.SetTitleX(0.);
    gStyle.SetTitleY(0.);
    gStyle.SetTitleW(1);
    gStyle.SetTitleH(0.058);
    #gStyle.SetTitleXOffset(0.05)
    gStyle.SetTitleBorderSize(0);
    gStyle.SetPadLeftMargin(0.126);
    gStyle.SetPadRightMargin(0.04);
    gStyle.SetPadTopMargin(0.06);
    gStyle.SetPadBottomMargin(0.13);
    gStyle.SetOptStat(0);
    gStyle.SetMarkerStyle(1);
    gPad.SetTickx(1)
    gPad.SetTicky(1)
    if setLogx:
        gPad.SetLogx()
    #gStyle.SetStatStyle(0)
    gStyle.SetOptStat(11111111)
    h.SetStats(1)
    h.GetXaxis().SetLabelSize(0.05)
    h.GetYaxis().SetLabelSize(0.05)
    h.GetXaxis().SetTitleSize(0.06)
    h.GetYaxis().SetTitleSize(0.06)
    #h.GetXaxis().SetLimits(0,maxbin)
    h.Draw()
    h.SetMarkerColor(kBlue)
    h.SetLineColor(kBlue)
    h.SetLineWidth(2)
    h.SetMarkerStyle(1)
    h.SetMarkerSize(15)
    #tex = drawLabel(p.ctau + ", " + p.mass,0.45,0.55,0.05)
    #tex4 = drawLabel(p.mass,0.55,0.47,0.05)
    #tex3 = drawLabel("H #rightarrow 2n_{1} #rightarrow 2n_{D}2Z_{D} #rightarrow 2n_{D}4#mu",0.45,0.65,0.05)
    tex2 = applyTdrStyle()
    c.SaveAs(targetDir + plotTitle + ".png")


#_______________________________________________________________________________
def get_1D(p, h_name, h_bins, to_draw, cut, opt = "", color = kBlue):
    gStyle.SetStatStyle(0)
    gStyle.SetOptStat(11111111)
    #nbins = len(xbins)
    #h = TH1F("h_name", "h_name", nbins, xbins);
    binLow = [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,12.0,14.0,16.0,18.0,20.0,24.0,28.0,32.0,36.0,42.0,50.0]
    ptbins = np.asarray(binLow)


    p.Draw(to_draw + ">>" + h_name + h_bins, cut)
    h = TH1F(gDirectory.Get(h_name).Clone(h_name))
    if not h:
        sys.exit('%s does not exist'%(to_draw))
    h.SetTitle(title)
    h.SetLineWidth(2)
    h.SetLineColor(color)
    h.SetMinimum(0.)
    SetOwnership(h, False)
    return h

#_______________________________________________________________________________
def get_2D(p, xbins, h_bins, to_draw, cut, opt = "", color = kBlue):
    gStyle.SetStatStyle(0)
    gStyle.SetOptStat(11111111)
    nBins = int(h_bins[1:-1].split(',')[0])
    minBin = float(h_bins[1:-1].split(',')[1])
    maxBin = float(h_bins[1:-1].split(',')[2])
    nxbins = len(xbins)-1

    h = TH2F("my_hist", "my_hist", nxbins, xbins, nBins, minBin, maxBin);

    p.Draw(to_draw + ">>my_hist", cut)
    #h = TH2F(gDirectory.Get("my_hist").Clone("my_hist_clone"))
    if not h:
        sys.exit('%s does not exist'%(to_draw))
    #h.SetTitle("")
    #h.SetLineWidth(2)
    #h.SetLineColor(color)
    #h.SetMinimum(0.)
    SetOwnership(h, False)
    return h

#_______________________________________________________________________________
def to_array(x, fmt="d"):
    return array.array(fmt, x)


#_______________________________________________________________________________
def getEfficiency(t, to_draw, denom_cut, extra_num_cut, color = kBlue, marker_st = 20):
    """Make an efficiency plot"""

    ## total numerator selection cut
    num_cut = AND(denom_cut,extra_num_cut)

    binLow = [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,12.0,14.0,16.0,18.0,20.0,24.0,28.0,32.0,36.0,42.0,50.0]
    ptbins = np.asarray(binLow)

    num = TH1F("num", "", len(ptbins)-1, ptbins)
    den = TH1F("den", "", len(ptbins)-1, ptbins)

    t.Draw(to_draw + ">>num", num_cut, "goff")
    t.Draw(to_draw + ">>den", denom_cut, "goff")

    print num.GetEntries(), den.GetEntries()

    useTEfficiency = True
    if useTEfficiency:
        eff = TEfficiency(num, den)
    else:
        eff = TGraphAsymmErrors(num, den)

    eff.SetTitle("")
    #eff.SetLineWidth(2)
    #eff.SetLineColor(color)
    #eff.SetMarkerStyle(marker_st)
    #eff.SetMarkerColor(color)
    #eff.SetMarkerSize(.5)

    SetOwnership(eff, False)
    return eff


#_______________________________________________________________________________
def getEfficiencyEta(t, to_draw, denom_cut, extra_num_cut, color = kBlue, marker_st = 20):
    """Make an efficiency plot"""

    ## total numerator selection cut
    num_cut = AND(denom_cut,extra_num_cut)

    num = TH1F("num", "", 25, 0, 2.5)
    den = TH1F("den", "", 25, 0, 2.5)

    t.Draw(to_draw + ">>num", num_cut, "goff")
    t.Draw(to_draw + ">>den", denom_cut, "goff")

    print num.GetEntries(), den.GetEntries()

    useTEfficiency = True
    if useTEfficiency:
        eff = TEfficiency(num, den)
    else:
        eff = TGraphAsymmErrors(num, den)

    eff.SetTitle("")
    #eff.SetLineWidth(2)
    #eff.SetLineColor(color)
    #eff.SetMarkerStyle(marker_st)
    #eff.SetMarkerColor(color)
    #eff.SetMarkerSize(.5)

    SetOwnership(eff, False)
    return eff
